---
http_interactions:
- request:
    method: get
    uri: https://www.onyphe.io/api/onionscan/mh7mkfvezts5j6yu.onion?apikey=<API_KEY>&page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.onyphe.io
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Mon, 21 Oct 2019 06:30:57 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '35346'
      Connection:
      - keep-alive
    body:
      encoding: UTF-8
      string: '{"count":6,"error":0,"max_page":1,"myip":"<MY_IP>","page":1,"results":[{"@category":"onionscan","@timestamp":"2019-10-15T08:41:22.000Z","@type":"doc","app":{"extract":{"domain":["github.com","shenlanguage.org","wikipedia.org","co.uk","github.io"],"file":["www.sh","atom.xml","rss.xml"],"hostname":["en.wikipedia.org","github.com","gravicappa.github.io","shen-language.github.io","shenlanguage.org","www.amazon.co.uk","www.shenlanguage.org"],"url":["https:\/\/shen-language.github.io\/","https:\/\/en.wikipedia.org\/wiki\/Sequent_calculus","http:\/\/shenlanguage.org\/","http:\/\/www.shenlanguage.org\/learn-shen\/shen_in_15mins.html","http:\/\/www.shenlanguage.org\/learn-shen\/OSmanual.htm","https:\/\/github.com\/doublec\/shen-wasp\/","https:\/\/www.amazon.co.uk\/Book-Shen-Third-Mark-Tarver\/dp\/1784562130","https:\/\/gravicappa.github.io\/shen-js\/shen.html"]},"http":{"bodymd5":"441eb494338211da5141e6909bb9c80b","headermd5":"a2537e6fbaeb085ff0380c9144ee74fe","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 86791\r\nETag: \"5d9bef4f-15307\"\r\nDate: Tue,
        15 Oct 2019 08:41:22 GMT\r\nLast-Modified: Tue, 08 Oct 2019 02:07:11 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nConnection:
        keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"content-type\"
        content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish Coder<\/title>\n   <meta
        name=\"author\" content=\"Chris Double\" \/>\n\n   <link href=\".\/atom.xml\"
        rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\" \/>\n   <link
        rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\" href=\".\/rss.xml\"\/>
        \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\" type=\"text\/css\"
        media=\"screen, projection\">\n   <link rel=\"stylesheet\" href=\".\/css\/print.css\"
        type=\"text\/css\" media=\"print\">\n   <!--[if lt IE 8]><link rel=\"stylesheet\"
        href=\".\/css\/ie.css\" type=\"text\/css\" media=\"screen, projection\"><![endif]-->\n   <link
        rel=\"stylesheet\" href=\".\/css\/syntax.css\" type=\"text\/css\" \/>\n   <link
        rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\" type=\"text\/css\">\n<\/head>\n<body>\n  <div
        class=\"container\">\n    <div class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a
        href=\".\/index.html\">Bluish Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming
        Languages, Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-10-03<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/10\/03\/defining-types-in-shen.html\">Defining
        Types in Shen<\/a><\/h2>\n      <p>The <a href=\"http:\/\/shenlanguage.org\/\">Shen
        programming language<\/a> has an extensible type system. Types are defined
        using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sequent_calculus\">sequent
        calculus<\/a> and the system is powerful enough to create a variety of exotic
        types but it can be difficult when first starting with Shen to know how to
        use that power. In this post I hope to go through some basic examples of defining
        types in Shen without needing to know too much sequent calculus details.<\/p>\n\n<p>For
        an overview of Shen there is <a href=\"http:\/\/www.shenlanguage.org\/learn-shen\/shen_in_15mins.html\">Shen
        in 15 minutes<\/a> and the <a href=\"http:\/\/www.shenlanguage.org\/learn-shen\/OSmanual.htm\">Shen
        OS Kernel Manual<\/a>. An <a href=\"https:\/\/gravicappa.github.io\/shen-js\/shen.html#.doc\/welcome.html\">interactive
        JavaScript REPL<\/a> exists to try examples in the browser or pick on one
        of the <a href=\"https:\/\/shen-language.github.io\/\">existing Shen language
        ports<\/a>. For these examples I''m using my <a href=\"https:\/\/github.com\/doublec\/shen-wasp\/\">Wasp
        Lisp port of Shen<\/a>.<\/p>\n\n<p>Shen is optionally typed. The type checker
        can be turned off and on. By default it is off and this can be seen in the
        Shen prompt by the presence of a ''<code>-<\/code>'' character:<\/p>\n\n<pre><code>(0-)
        ...shen code...\n<\/code><\/pre>\n\n<p>Turning type checking on is done by
        using <code>(tc +)<\/code>. The ''<code>-<\/code>'' in the prompt changes
        to a ''<code>+<\/code>'' to show type checking is active. It can be turned
        off again with <code>(tc -)<\/code>:<\/p>\n\n<pre><code>(0-) (tc +)\n(1+)
        (tc -)\n(2-) ...\n<\/code><\/pre>\n\n<p>Types in Shen are defined using <code>datatype<\/code>.
        The body of the <code>datatype<\/code> definition contains a series of sequent
        calculus rules. These rules define how an object in Shen can be proved to
        belong to a particular type. Rather than go through a detailed description
        of sequent calculus, I''m going to present common examples of types in Shen
        to learn by example and dive into details as needed. There''s the <a href=\"https:\/\/www.amazon.co.uk\/Book-Shen-Third-Mark-Tarver\/dp\/1784562130\">Shen
        Language Book<\/a> for much more detail if needed.<\/p>\n\n<h2>Records<\/h2>\n\n<p>One
        way of storing collections of data in Shen is to use lists or vectors. For
        example, given an the concept of a ''person'' that has a name and age, this
        can be stored in a list with functions to get the relevent data:<\/p>\n\n<pre><code>(tc
        -)\n\n(define make-person\n  Name Age -&gt; [Name","datamd5":"4eb23f8baf9abac3c8400e85757459c4","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-10-15","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"},{"@category":"onionscan","@timestamp":"2019-10-11T07:33:13.000Z","@type":"doc","app":{"extract":{"domain":["wikipedia.org","shenlanguage.org","github.com","github.io","co.uk"],"file":["atom.xml","www.sh","rss.xml"],"hostname":["en.wikipedia.org","github.com","gravicappa.github.io","shen-language.github.io","shenlanguage.org","www.amazon.co.uk","www.shenlanguage.org"],"url":["http:\/\/www.shenlanguage.org\/learn-shen\/shen_in_15mins.html","https:\/\/en.wikipedia.org\/wiki\/Sequent_calculus","http:\/\/www.shenlanguage.org\/learn-shen\/OSmanual.htm","https:\/\/gravicappa.github.io\/shen-js\/shen.html","https:\/\/github.com\/doublec\/shen-wasp\/","http:\/\/shenlanguage.org\/","https:\/\/shen-language.github.io\/","https:\/\/www.amazon.co.uk\/Book-Shen-Third-Mark-Tarver\/dp\/1784562130"]},"http":{"bodymd5":"441eb494338211da5141e6909bb9c80b","headermd5":"a2537e6fbaeb085ff0380c9144ee74fe","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 86791\r\nETag: \"5d9bef4f-15307\"\r\nDate: Fri,
        11 Oct 2019 07:33:13 GMT\r\nLast-Modified: Tue, 08 Oct 2019 02:07:11 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nConnection:
        keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"content-type\"
        content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish Coder<\/title>\n   <meta
        name=\"author\" content=\"Chris Double\" \/>\n\n   <link href=\".\/atom.xml\"
        rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\" \/>\n   <link
        rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\" href=\".\/rss.xml\"\/>
        \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\" type=\"text\/css\"
        media=\"screen, projection\">\n   <link rel=\"stylesheet\" href=\".\/css\/print.css\"
        type=\"text\/css\" media=\"print\">\n   <!--[if lt IE 8]><link rel=\"stylesheet\"
        href=\".\/css\/ie.css\" type=\"text\/css\" media=\"screen, projection\"><![endif]-->\n   <link
        rel=\"stylesheet\" href=\".\/css\/syntax.css\" type=\"text\/css\" \/>\n   <link
        rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\" type=\"text\/css\">\n<\/head>\n<body>\n  <div
        class=\"container\">\n    <div class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a
        href=\".\/index.html\">Bluish Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming
        Languages, Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-10-03<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/10\/03\/defining-types-in-shen.html\">Defining
        Types in Shen<\/a><\/h2>\n      <p>The <a href=\"http:\/\/shenlanguage.org\/\">Shen
        programming language<\/a> has an extensible type system. Types are defined
        using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sequent_calculus\">sequent
        calculus<\/a> and the system is powerful enough to create a variety of exotic
        types but it can be difficult when first starting with Shen to know how to
        use that power. In this post I hope to go through some basic examples of defining
        types in Shen without needing to know too much sequent calculus details.<\/p>\n\n<p>For
        an overview of Shen there is <a href=\"http:\/\/www.shenlanguage.org\/learn-shen\/shen_in_15mins.html\">Shen
        in 15 minutes<\/a> and the <a href=\"http:\/\/www.shenlanguage.org\/learn-shen\/OSmanual.htm\">Shen
        OS Kernel Manual<\/a>. An <a href=\"https:\/\/gravicappa.github.io\/shen-js\/shen.html#.doc\/welcome.html\">interactive
        JavaScript REPL<\/a> exists to try examples in the browser or pick on one
        of the <a href=\"https:\/\/shen-language.github.io\/\">existing Shen language
        ports<\/a>. For these examples I''m using my <a href=\"https:\/\/github.com\/doublec\/shen-wasp\/\">Wasp
        Lisp port of Shen<\/a>.<\/p>\n\n<p>Shen is optionally typed. The type checker
        can be turned off and on. By default it is off and this can be seen in the
        Shen prompt by the presence of a ''<code>-<\/code>'' character:<\/p>\n\n<pre><code>(0-)
        ...shen code...\n<\/code><\/pre>\n\n<p>Turning type checking on is done by
        using <code>(tc +)<\/code>. The ''<code>-<\/code>'' in the prompt changes
        to a ''<code>+<\/code>'' to show type checking is active. It can be turned
        off again with <code>(tc -)<\/code>:<\/p>\n\n<pre><code>(0-) (tc +)\n(1+)
        (tc -)\n(2-) ...\n<\/code><\/pre>\n\n<p>Types in Shen are defined using <code>datatype<\/code>.
        The body of the <code>datatype<\/code> definition contains a series of sequent
        calculus rules. These rules define how an object in Shen can be proved to
        belong to a particular type. Rather than go through a detailed description
        of sequent calculus, I''m going to present common examples of types in Shen
        to learn by example and dive into details as needed. There''s the <a href=\"https:\/\/www.amazon.co.uk\/Book-Shen-Third-Mark-Tarver\/dp\/1784562130\">Shen
        Language Book<\/a> for much more detail if needed.<\/p>\n\n<h2>Records<\/h2>\n\n<p>One
        way of storing collections of data in Shen is to use lists or vectors. For
        example, given an the concept of a ''person'' that has a name and age, this
        can be stored in a list with functions to get the relevent data:<\/p>\n\n<pre><code>(tc
        -)\n\n(define make-person\n  Name Age -&gt; [Name","datamd5":"4eb23f8baf9abac3c8400e85757459c4","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-10-11","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"},{"@category":"onionscan","@timestamp":"2019-10-02T06:43:50.000Z","@type":"doc","app":{"extract":{"domain":["blogspot.com","mercurylang.org","princexml.com","github.com"],"file":["atom.xml","rss.xml"],"hostname":["adventuresinmercury.blogspot.com","dl.mercurylang.org","github.com","www.mercurylang.org","www.princexml.com"],"url":["https:\/\/www.princexml.com\/","https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap","https:\/\/www.mercurylang.org\/","https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html","http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz","http:\/\/dl.mercurylang.org\/index.html","https:\/\/adventuresinmercury.blogspot.com\/"]},"http":{"bodymd5":"ceed964a59ce401e3b16cfe4f9993ed6","headermd5":"e316168414521f0da6d7f32f41642bd0","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 95012\r\nETag: \"5d0f733f-17324\"\r\nDate: Wed,
        02 Oct 2019 06:43:50 GMT\r\nLast-Modified: Sun, 23 Jun 2019 12:40:31 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nAge:
        1\r\nConnection: keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta
        http-equiv=\"content-type\" content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish
        Coder<\/title>\n   <meta name=\"author\" content=\"Chris Double\" \/>\n\n   <link
        href=\".\/atom.xml\" rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\"
        \/>\n   <link rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\"
        href=\".\/rss.xml\"\/> \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\"
        type=\"text\/css\" media=\"screen, projection\">\n   <link rel=\"stylesheet\"
        href=\".\/css\/print.css\" type=\"text\/css\" media=\"print\">\n   <!--[if
        lt IE 8]><link rel=\"stylesheet\" href=\".\/css\/ie.css\" type=\"text\/css\"
        media=\"screen, projection\"><![endif]-->\n   <link rel=\"stylesheet\" href=\".\/css\/syntax.css\"
        type=\"text\/css\" \/>\n   <link rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\"
        type=\"text\/css\">\n<\/head>\n<body>\n  <div class=\"container\">\n    <div
        class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a href=\".\/index.html\">Bluish
        Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming Languages,
        Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-06-23<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/06\/23\/getting-started-with-mercury.html\">Getting
        Started with Mercury<\/a><\/h2>\n      <p><a href=\"https:\/\/www.mercurylang.org\/\">Mercury<\/a>
        is a logic programming\nlanguage, similar to Prolog, but with static types.
        It feels like a\ncombination of SML and Prolog at times. It was designed to
        help with\nprogramming large systems - that is large programs, large teams
        and\nbetter reliability, etc. The commercial product <a href=\"https:\/\/www.princexml.com\/\">Prince\nXML<\/a>
        is written in Mercury.<\/p>\n\n<p>I''ve played around with Mercury in the
        past but haven''t done anything\nsubstantial with it. Recently I picked it
        up again. This post is a\nshort introduction to building Mercury, and some
        example \"Hello World\"\nstyle programs to test the install.<\/p>\n\n<h2>Build<\/h2>\n\n<p>Mercury
        is written in the Mercury language itself. This means it needs\na Mercury
        compiler to bootstrap from. The way I got a build going from\nsource was to
        download the source for a <a href=\"http:\/\/dl.mercurylang.org\/index.html\">release
        of the\nday<\/a> version, build that, then\nuse that build to build the Mercury
        source from github. The steps are\noutlined in the <a href=\"https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap\">README.bootstrap<\/a>\nfile,
        but the following commands are the basic steps:<\/p>\n\n<pre><code>$ wget
        http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz\n$
        tar xvf mercury-srcdist-rotd-2019-06-22.tar.gz\n$ cd mercury-srcdist-rotd-2019-06-22\n$
        .\/configure --enable-minimal-install --prefix=\/tmp\/mercury\n$ make\n$ make
        install\n$ cd ..\n$ export PATH=\/tmp\/mercury\/bin:$PATH\n<\/code><\/pre>\n\n<p>With
        this minimal compiler the main source can be built. Mercury has a\nnumber
        of backends, called ''grades'' in the documentation. Each of\nthese grades
        makes a number of tradeoffs in terms of generated\ncode. They define the platform
        (C, assembler, Java, etc), whether GC\nis used, what type of threading model
        is available (if any), etc. The\n<a href=\"https:\/\/adventuresinmercury.blogspot.com\/\">Adventures
        in Mercury<\/a>\nblog has an <a href=\"https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html\">article
        on some of the different\ngrades<\/a>. Building\nall of them can take a long
        time - multiple hours - so it pays to\nlimit it if you don''t need some of
        the backends.<\/p>\n\n<p>For my purposes I didn''t need the CSharp backend,
        but wanted to\nexplore the others. I was ok with the time tradeoff of building
        the\nsystem. To build from the <code>master<\/code> branch of the github repository
        I\ndid the following steps:<\/p>","datamd5":"dc83734e53b63b2b74f1dc09f118e889","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-10-02","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"},{"@category":"onionscan","@timestamp":"2019-09-30T13:57:58.000Z","@type":"doc","app":{"extract":{"domain":["mercurylang.org","blogspot.com","princexml.com","github.com"],"file":["atom.xml","rss.xml"],"hostname":["adventuresinmercury.blogspot.com","dl.mercurylang.org","github.com","www.mercurylang.org","www.princexml.com"],"url":["https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap","http:\/\/dl.mercurylang.org\/index.html","https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html","https:\/\/adventuresinmercury.blogspot.com\/","https:\/\/www.mercurylang.org\/","http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz","https:\/\/www.princexml.com\/"]},"http":{"bodymd5":"ceed964a59ce401e3b16cfe4f9993ed6","headermd5":"a2537e6fbaeb085ff0380c9144ee74fe","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 95012\r\nETag: \"5d0f733f-17324\"\r\nDate: Mon,
        30 Sep 2019 13:57:58 GMT\r\nLast-Modified: Sun, 23 Jun 2019 12:40:31 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nConnection:
        keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"content-type\"
        content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish Coder<\/title>\n   <meta
        name=\"author\" content=\"Chris Double\" \/>\n\n   <link href=\".\/atom.xml\"
        rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\" \/>\n   <link
        rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\" href=\".\/rss.xml\"\/>
        \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\" type=\"text\/css\"
        media=\"screen, projection\">\n   <link rel=\"stylesheet\" href=\".\/css\/print.css\"
        type=\"text\/css\" media=\"print\">\n   <!--[if lt IE 8]><link rel=\"stylesheet\"
        href=\".\/css\/ie.css\" type=\"text\/css\" media=\"screen, projection\"><![endif]-->\n   <link
        rel=\"stylesheet\" href=\".\/css\/syntax.css\" type=\"text\/css\" \/>\n   <link
        rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\" type=\"text\/css\">\n<\/head>\n<body>\n  <div
        class=\"container\">\n    <div class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a
        href=\".\/index.html\">Bluish Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming
        Languages, Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-06-23<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/06\/23\/getting-started-with-mercury.html\">Getting
        Started with Mercury<\/a><\/h2>\n      <p><a href=\"https:\/\/www.mercurylang.org\/\">Mercury<\/a>
        is a logic programming\nlanguage, similar to Prolog, but with static types.
        It feels like a\ncombination of SML and Prolog at times. It was designed to
        help with\nprogramming large systems - that is large programs, large teams
        and\nbetter reliability, etc. The commercial product <a href=\"https:\/\/www.princexml.com\/\">Prince\nXML<\/a>
        is written in Mercury.<\/p>\n\n<p>I''ve played around with Mercury in the
        past but haven''t done anything\nsubstantial with it. Recently I picked it
        up again. This post is a\nshort introduction to building Mercury, and some
        example \"Hello World\"\nstyle programs to test the install.<\/p>\n\n<h2>Build<\/h2>\n\n<p>Mercury
        is written in the Mercury language itself. This means it needs\na Mercury
        compiler to bootstrap from. The way I got a build going from\nsource was to
        download the source for a <a href=\"http:\/\/dl.mercurylang.org\/index.html\">release
        of the\nday<\/a> version, build that, then\nuse that build to build the Mercury
        source from github. The steps are\noutlined in the <a href=\"https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap\">README.bootstrap<\/a>\nfile,
        but the following commands are the basic steps:<\/p>\n\n<pre><code>$ wget
        http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz\n$
        tar xvf mercury-srcdist-rotd-2019-06-22.tar.gz\n$ cd mercury-srcdist-rotd-2019-06-22\n$
        .\/configure --enable-minimal-install --prefix=\/tmp\/mercury\n$ make\n$ make
        install\n$ cd ..\n$ export PATH=\/tmp\/mercury\/bin:$PATH\n<\/code><\/pre>\n\n<p>With
        this minimal compiler the main source can be built. Mercury has a\nnumber
        of backends, called ''grades'' in the documentation. Each of\nthese grades
        makes a number of tradeoffs in terms of generated\ncode. They define the platform
        (C, assembler, Java, etc), whether GC\nis used, what type of threading model
        is available (if any), etc. The\n<a href=\"https:\/\/adventuresinmercury.blogspot.com\/\">Adventures
        in Mercury<\/a>\nblog has an <a href=\"https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html\">article
        on some of the different\ngrades<\/a>. Building\nall of them can take a long
        time - multiple hours - so it pays to\nlimit it if you don''t need some of
        the backends.<\/p>\n\n<p>For my purposes I didn''t need the CSharp backend,
        but wanted to\nexplore the others. I was ok with the time tradeoff of building
        the\nsystem. To build from the <code>master<\/code> branch of the github repository
        I\ndid the following steps:<\/p>\n\n<pre><","datamd5":"ce80c443ce82c2ce1f27765d8ea461a3","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-09-30","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"},{"@category":"onionscan","@timestamp":"2019-09-23T13:53:05.000Z","@type":"doc","app":{"extract":{"domain":["mercurylang.org","blogspot.com","princexml.com","github.com"],"file":["rss.xml","atom.xml"],"hostname":["adventuresinmercury.blogspot.com","dl.mercurylang.org","github.com","www.mercurylang.org","www.princexml.com"],"url":["https:\/\/www.mercurylang.org\/","http:\/\/dl.mercurylang.org\/index.html","http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz","https:\/\/adventuresinmercury.blogspot.com\/","https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html","https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap","https:\/\/www.princexml.com\/"]},"http":{"bodymd5":"ceed964a59ce401e3b16cfe4f9993ed6","headermd5":"a2537e6fbaeb085ff0380c9144ee74fe","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 95012\r\nETag: \"5d0f733f-17324\"\r\nDate: Mon,
        23 Sep 2019 13:53:05 GMT\r\nLast-Modified: Sun, 23 Jun 2019 12:40:31 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nConnection:
        keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"content-type\"
        content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish Coder<\/title>\n   <meta
        name=\"author\" content=\"Chris Double\" \/>\n\n   <link href=\".\/atom.xml\"
        rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\" \/>\n   <link
        rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\" href=\".\/rss.xml\"\/>
        \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\" type=\"text\/css\"
        media=\"screen, projection\">\n   <link rel=\"stylesheet\" href=\".\/css\/print.css\"
        type=\"text\/css\" media=\"print\">\n   <!--[if lt IE 8]><link rel=\"stylesheet\"
        href=\".\/css\/ie.css\" type=\"text\/css\" media=\"screen, projection\"><![endif]-->\n   <link
        rel=\"stylesheet\" href=\".\/css\/syntax.css\" type=\"text\/css\" \/>\n   <link
        rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\" type=\"text\/css\">\n<\/head>\n<body>\n  <div
        class=\"container\">\n    <div class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a
        href=\".\/index.html\">Bluish Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming
        Languages, Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-06-23<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/06\/23\/getting-started-with-mercury.html\">Getting
        Started with Mercury<\/a><\/h2>\n      <p><a href=\"https:\/\/www.mercurylang.org\/\">Mercury<\/a>
        is a logic programming\nlanguage, similar to Prolog, but with static types.
        It feels like a\ncombination of SML and Prolog at times. It was designed to
        help with\nprogramming large systems - that is large programs, large teams
        and\nbetter reliability, etc. The commercial product <a href=\"https:\/\/www.princexml.com\/\">Prince\nXML<\/a>
        is written in Mercury.<\/p>\n\n<p>I''ve played around with Mercury in the
        past but haven''t done anything\nsubstantial with it. Recently I picked it
        up again. This post is a\nshort introduction to building Mercury, and some
        example \"Hello World\"\nstyle programs to test the install.<\/p>\n\n<h2>Build<\/h2>\n\n<p>Mercury
        is written in the Mercury language itself. This means it needs\na Mercury
        compiler to bootstrap from. The way I got a build going from\nsource was to
        download the source for a <a href=\"http:\/\/dl.mercurylang.org\/index.html\">release
        of the\nday<\/a> version, build that, then\nuse that build to build the Mercury
        source from github. The steps are\noutlined in the <a href=\"https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap\">README.bootstrap<\/a>\nfile,
        but the following commands are the basic steps:<\/p>\n\n<pre><code>$ wget
        http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz\n$
        tar xvf mercury-srcdist-rotd-2019-06-22.tar.gz\n$ cd mercury-srcdist-rotd-2019-06-22\n$
        .\/configure --enable-minimal-install --prefix=\/tmp\/mercury\n$ make\n$ make
        install\n$ cd ..\n$ export PATH=\/tmp\/mercury\/bin:$PATH\n<\/code><\/pre>\n\n<p>With
        this minimal compiler the main source can be built. Mercury has a\nnumber
        of backends, called ''grades'' in the documentation. Each of\nthese grades
        makes a number of tradeoffs in terms of generated\ncode. They define the platform
        (C, assembler, Java, etc), whether GC\nis used, what type of threading model
        is available (if any), etc. The\n<a href=\"https:\/\/adventuresinmercury.blogspot.com\/\">Adventures
        in Mercury<\/a>\nblog has an <a href=\"https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html\">article
        on some of the different\ngrades<\/a>. Building\nall of them can take a long
        time - multiple hours - so it pays to\nlimit it if you don''t need some of
        the backends.<\/p>\n\n<p>For my purposes I didn''t need the CSharp backend,
        but wanted to\nexplore the others. I was ok with the time tradeoff of building
        the\nsystem. To build from the <code>master<\/code> branch of the github repository
        I\ndid the following steps:<\/p>\n\n<pre><","datamd5":"ce80c443ce82c2ce1f27765d8ea461a3","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-09-23","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"},{"@category":"onionscan","@timestamp":"2019-09-22T17:52:05.000Z","@type":"doc","app":{"extract":{"domain":["github.com","mercurylang.org","princexml.com","blogspot.com"],"file":["atom.xml","rss.xml"],"hostname":["adventuresinmercury.blogspot.com","dl.mercurylang.org","github.com","www.mercurylang.org","www.princexml.com"],"url":["https:\/\/adventuresinmercury.blogspot.com\/","http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz","https:\/\/www.princexml.com\/","https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html","https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap","https:\/\/www.mercurylang.org\/","http:\/\/dl.mercurylang.org\/index.html"]},"http":{"bodymd5":"ceed964a59ce401e3b16cfe4f9993ed6","headermd5":"a2537e6fbaeb085ff0380c9144ee74fe","title":"Bluish
        Coder"},"length":"4096"},"cpe":["cpe:\/a:igor_sysoev:nginx:1.10.3"],"cpecount":1,"data":"HTTP\/1.1
        200 OK\r\nContent-Length: 95012\r\nETag: \"5d0f733f-17324\"\r\nDate: Sun,
        22 Sep 2019 17:52:04 GMT\r\nLast-Modified: Sun, 23 Jun 2019 12:40:31 GMT\r\nServer:
        nginx\/1.10.3 (Ubuntu)\r\nContent-Type: text\/html\r\nAccept-Ranges: bytes\r\nConnection:
        keep-alive\r\n\r\n\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"content-type\"
        content=\"text\/html; charset=utf-8\" \/>\n   <title>Bluish Coder<\/title>\n   <meta
        name=\"author\" content=\"Chris Double\" \/>\n\n   <link href=\".\/atom.xml\"
        rel=\"alternate\" title=\"Bluish Coder\" type=\"application\/atom+xml\" \/>\n   <link
        rel=\"alternate\" type=\"application\/rss+xml\" title=\"RSS\" href=\".\/rss.xml\"\/>
        \n\n   <link rel=\"stylesheet\" href=\".\/css\/screen.css\" type=\"text\/css\"
        media=\"screen, projection\">\n   <link rel=\"stylesheet\" href=\".\/css\/print.css\"
        type=\"text\/css\" media=\"print\">\n   <!--[if lt IE 8]><link rel=\"stylesheet\"
        href=\".\/css\/ie.css\" type=\"text\/css\" media=\"screen, projection\"><![endif]-->\n   <link
        rel=\"stylesheet\" href=\".\/css\/syntax.css\" type=\"text\/css\" \/>\n   <link
        rel=\"stylesheet\" href=\".\/css\/bluishcoder.css\" type=\"text\/css\">\n<\/head>\n<body>\n  <div
        class=\"container\">\n    <div class=\"span-24 blog-header\">\n      <h1 id=\"blog-title\"><a
        href=\".\/index.html\">Bluish Coder<\/a><\/h1>\n      <p id=\"blog-description\">Programming
        Languages, Martials Arts and Computers. The Weblog of Chris Double.<\/p>\n    <\/div>\n    \n    <hr>\n    <div
        class=\"span-20\">\n      \n\n  \n    <div class=\"post\">\n      <div class=\"span-2\"><p
        class=\"small-heading\">2019-06-23<\/p><\/div>\n      <div class=\"span-18
        last\">\n      <h2 class=\"post-title\"><a href=\".\/.\/2019\/06\/23\/getting-started-with-mercury.html\">Getting
        Started with Mercury<\/a><\/h2>\n      <p><a href=\"https:\/\/www.mercurylang.org\/\">Mercury<\/a>
        is a logic programming\nlanguage, similar to Prolog, but with static types.
        It feels like a\ncombination of SML and Prolog at times. It was designed to
        help with\nprogramming large systems - that is large programs, large teams
        and\nbetter reliability, etc. The commercial product <a href=\"https:\/\/www.princexml.com\/\">Prince\nXML<\/a>
        is written in Mercury.<\/p>\n\n<p>I''ve played around with Mercury in the
        past but haven''t done anything\nsubstantial with it. Recently I picked it
        up again. This post is a\nshort introduction to building Mercury, and some
        example \"Hello World\"\nstyle programs to test the install.<\/p>\n\n<h2>Build<\/h2>\n\n<p>Mercury
        is written in the Mercury language itself. This means it needs\na Mercury
        compiler to bootstrap from. The way I got a build going from\nsource was to
        download the source for a <a href=\"http:\/\/dl.mercurylang.org\/index.html\">release
        of the\nday<\/a> version, build that, then\nuse that build to build the Mercury
        source from github. The steps are\noutlined in the <a href=\"https:\/\/github.com\/Mercury-Language\/mercury\/blob\/master\/README.bootstrap\">README.bootstrap<\/a>\nfile,
        but the following commands are the basic steps:<\/p>\n\n<pre><code>$ wget
        http:\/\/dl.mercurylang.org\/rotd\/mercury-srcdist-rotd-2019-06-22.tar.gz\n$
        tar xvf mercury-srcdist-rotd-2019-06-22.tar.gz\n$ cd mercury-srcdist-rotd-2019-06-22\n$
        .\/configure --enable-minimal-install --prefix=\/tmp\/mercury\n$ make\n$ make
        install\n$ cd ..\n$ export PATH=\/tmp\/mercury\/bin:$PATH\n<\/code><\/pre>\n\n<p>With
        this minimal compiler the main source can be built. Mercury has a\nnumber
        of backends, called ''grades'' in the documentation. Each of\nthese grades
        makes a number of tradeoffs in terms of generated\ncode. They define the platform
        (C, assembler, Java, etc), whether GC\nis used, what type of threading model
        is available (if any), etc. The\n<a href=\"https:\/\/adventuresinmercury.blogspot.com\/\">Adventures
        in Mercury<\/a>\nblog has an <a href=\"https:\/\/adventuresinmercury.blogspot.com\/2011\/11\/making-grade.html\">article
        on some of the different\ngrades<\/a>. Building\nall of them can take a long
        time - multiple hours - so it pays to\nlimit it if you don''t need some of
        the backends.<\/p>\n\n<p>For my purposes I didn''t need the CSharp backend,
        but wanted to\nexplore the others. I was ok with the time tradeoff of building
        the\nsystem. To build from the <code>master<\/code> branch of the github repository
        I\ndid the following steps:<\/p>\n\n<pre><","datamd5":"ce80c443ce82c2ce1f27765d8ea461a3","device":{"class":"Web
        Server"},"domain":"mh7mkfvezts5j6yu.onion","forward":"mh7mkfvezts5j6yu.onion","hostname":"mh7mkfvezts5j6yu.onion","onion":"mh7mkfvezts5j6yu.onion","os":"Linux","osdistribution":"Ubuntu","osvendor":"Linux","port":"80","product":"NGINX","productvendor":"Igor
        Sysoev","productversion":"1.10.3","protocol":"http","protocolversion":"1.1","reason":"OK","seen_date":"2019-09-22","source":"onionscan","status":"200","tag":["ok"],"tls":"false","transport":"tcp","url":"\/"}],"status":"ok","took":"0.120","total":6}'
    http_version: 
  recorded_at: Mon, 21 Oct 2019 06:30:57 GMT
recorded_with: VCR 5.0.0
